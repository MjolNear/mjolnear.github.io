{"version":3,"sources":["business-logic/near/enviroment/network.ts","business-logic/near/enviroment/contract-names.ts","business-logic/near/enviroment/near.ts","business-logic/near/enviroment/config.ts","business-logic/near/constants.ts","business-logic/near/api/rpc.ts","business-logic/near/api/collection/api.ts","utils/css-utils.ts","components/Common/navbar/buttons.js","pages/navbar/menu/TabDropDownMenu.jsx","resources/hammer.png","resources/label6.png","pages/navbar/Navbar.js","hooks/redux.ts","pages/navbar/NavbarContainer.js","pages/landing/GreetingText.tsx","pages/landing/LandingPage.tsx","pages/not-found/NotFoundPage.jsx","components/Common/text/DarkBlueTitle.jsx","components/Common/loaders/MjolLoader.tsx","components/Common/shadow/BlueShadowContainer.jsx","pages/create/nft/upload/lines/SingleCharLine.jsx","pages/create/nft/upload/lines/SingleNumberLine.jsx","pages/create/nft/upload/containers/SingleLineContainer.jsx","pages/create/nft/upload/containers/MultiLineContainer.jsx","resources/doc-img.png","pages/create/nft/upload/UploadFileInput.jsx","business-logic/ipfs/upload.ts","pages/create/nft/upload/lines/PropertyInput.jsx","components/Common/loaders/CreateLoader.tsx","pages/create/collection/CreateCollectionPage.jsx","business-logic/near/api/nfts/mint.js","pages/create/nft/upload/containers/OptionInputContainer.jsx","business-logic/near/api/collections/api.ts","business-logic/near/api/collections/get-user-collections.ts","business-logic/near/get-utils.js","business-logic/near/api/collections/get-collections-traits.js","pages/create/nft/upload/lines/OptionInput.jsx","pages/create/nft/CreateNftPage.jsx","pages/explore/collection/ExploreCollectionsPage.jsx","state/preview/nft/slice.ts","business-logic/near/api/utils.ts","business-logic/near/api/contracts/parser/lib/interfaces.ts","business-logic/near/api/core.ts","business-logic/near/api/contracts/api.ts","business-logic/near/api/contracts/marketplaces.ts","business-logic/near/api/standardization/nft-converter.ts","business-logic/near/api/nfts/api.ts","business-logic/near/api/market/api.ts","business-logic/near/api/batch-request/batchify.ts","business-logic/near/api/nfts/get-user-nfts.ts","hoc/withAuthData.tsx","components/Preview/PreviewNftImage.tsx","components/Common/borders/Hr.jsx","components/Common/buttons/DropDownMjolBlueButton.jsx","components/Icons/IconText.jsx","state/transaction/state.ts","utils/string.js","components/Preview/Attributes/PreviewAttribute.jsx","components/Preview/Attributes/PreviewAttributes.jsx","components/Preview/Blocks/NftPreviewTitle.tsx","components/Icons/ShareIcon.jsx","components/Preview/Blocks/NftPreviewCollectionLink.tsx","components/Preview/Blocks/NftPreviewInfo.jsx","hooks/useNftMarketStatus.ts","components/Common/buttons/DarkBlueGradientButton.jsx","components/Preview/Status/connect-wallet/ConnectWalletButton.jsx","components/Common/text/DarkBlueMjolText.jsx","resources/near-protocol-near-logo.svg","components/Icons/near/NearBlackLogo.tsx","components/Preview/Blocks/PreviewNftPrice.tsx","components/Preview/Status/withPriceContainer.tsx","components/Preview/Status/BuyNftContainer.jsx","state/transaction/nft/slice.ts","business-logic/near/api/market/transaction.ts","state/transaction/nft/thunk.ts","components/Common/modal/Modal.jsx","components/Preview/Status/sell/recieve/SinglePayout.jsx","components/Preview/Status/sell/recieve/PayoutsPreview.jsx","components/Preview/Status/sell/InputPriceModal.jsx","components/Preview/Status/sell/SellNftContainer.jsx","components/Preview/Status/UnlistNftContainer.tsx","components/Preview/Status/NftContractNotSupported.tsx","components/Preview/Status/NotListedNftContainer.tsx","pages/preview/nft/PreviewNftPage.tsx","state/preview/nft/thunk.ts","hoc/auth/Logout.tsx","components/Filter/search/SearchInput.jsx","pages/explore/nft/NftFilters.jsx","components/Card/CardLoader.tsx","components/CardList/CardsGridContainer.tsx","components/CardList/CardListLoader.tsx","components/Card/Blocks/ImageBlock.tsx","components/Card/Blocks/MintedBlock.tsx","components/Card/Blocks/TitleBlock.tsx","components/Card/Blocks/CollectionBlock.tsx","components/Card/Blocks/PriceBlock.tsx","components/Card/Card.tsx","components/CardList/CardGrid.tsx","state/explore/nfts/slice.ts","business-logic/near/api/market/get-nfts-market.ts","state/explore/nfts/thunk.ts","state/profile/nfts/slice.ts","components/CardList/CardList.tsx","pages/explore/nft/ExploreNftsPage.tsx","pages/profile/collections/ProfileCollectionsPage.tsx","pages/profile/nfts/ProfileHistoryFetch.tsx","components/CardList/EmptyCardList.tsx","pages/profile/nfts/ProfileNftsFetch.tsx","state/profile/nfts/thunk.ts","components/Common/buttons/MjolBlueGradientButton.jsx","pages/profile/nfts/navbar/ProfileNavigationBar.tsx","pages/profile/nfts/ProfileNftsPage.tsx","AppRouter.tsx","App.tsx","state/preview/reducer.ts","state/navbar/slice.ts","state/explore/reducer.ts","state/profile/reducer.ts","state/store.ts","index.tsx","business-logic/near/api/contracts/parser/lib/parseWasm.ts"],"names":["NetworkEnv","MJOL_MARKET_CONTRACT_ID","config","env","PRODUCTION","MAINNET","networkId","nodeUrl","contractName","walletUrl","helperUrl","explorerUrl","DEVELOPMENT","TESTNET","BETANET","LOCAL","keyPath","process","HOME","TEST","CI","masterAccount","CI_BETANET","Error","getConfig","near","Near","keyStore","keyStores","BrowserLocalStorageKeyStore","wallet","WalletConnection","getAccountId","Contract","account","viewMethods","changeMethods","signIn","requestSignIn","then","catch","GAS","BN","SM_DEPOSIT","YOCTO_NEAR","viewFunction","contractId","methodName","args","functionCall","gas","attachedDeposit","walletCallbackUrl","mjolViewFunction","mjolFunctionCall","collectionAPI","collectionId","from","limit","collection_id","classNames","classes","filter","Boolean","join","grayGradient","direction","CloseMenuButton","Button","className","DropDownButton","isOpen","tabName","MenuButton","TabsDropDownMenu","name","tabs","isProfile","as","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Panel","map","path","to","SmallNavBar","Navbar","React","memo","exploreTabs","explore","createTabs","create","profileTabs","profile","singleTabs","single","src","imgLogo","alt","imgLabel","Group","isSignedIn","onClick","focus","item","useAppDispatch","useDispatch","useAppSelector","useSelector","NavbarContainer","state","navbar","GreetingText","LandingPage","NotFoundPage","DarkBlueTitle","title","undefined","MjolLoader","size","style","border","borderTop","borderRadius","width","height","animation","BlueShadowContainer","children","SingleCharLine","props","type","id","placeholder","text","minLength","maxLength","onChange","e","setState","target","value","SingleNumberLine","min","max","SingleLineContainer","required","extra_name","MultiLineContainer","rows","defaultValue","UploadFileInput","jsonText","window","URL","createObjectURL","Blob","JSON","stringify","exampleJSON","extra_text","href","download","viewBox","fill","stroke","d","strokeWidth","strokeLinecap","strokeLinejoin","htmlFor","accept","files","file_text","docFileImg","xmlns","description","image","traits","a","client","NFTStorage","token","store","storeCollection","bannerImage","makeNftLink","nftIpfsLink","startsWith","slice","PropertyInput","blockInd","ind","CreateLoader","loop","animationData","lottieJson","play","LineAlert","role","CreateCollectionPage","useState","setTitle","setDescription","fileIcon","setFileIcon","fileBanner","setFileBanner","fileTraits","setFileTraits","isLoading","setIsLoading","alertText","setAlertText","hasTraits","setHasTraits","toggleTraits","setToggleTraits","propertiesNum","setPropertiesNum","fetchProperties","setFetchProperties","changeToggleMode","newMode","setProperty","el","tmpNum","prepareCollection","res","console","log","ipfsMedia","data","ipfsRef","url","collectionMetadata","metadata","createCollection","desc","media","reference","finally","onSubmit","preventDefault","length","reader","FileReader","onload","event","jsonTraits","parse","result","readAsText","pairObj","key","valuesArray","checked","concat","pop","curProps","block","push","addProperty","delProperty","OptionInputContainer","setCurCollection","myCollections","accountId","owner_id","NftAPI","fetch","timeout","response","ok","error","statusText","status","json","collections","collection","getJsonByURL","OptionInput","setCurValues","choosenValues","values","CreateNftPage","setMyCollections","collectionTraits","setCollectionTraits","nftTraits","setNftTraits","curCollection","royalty","setRoyalty","file","setFile","useEffect","getUserContracts","myColls","getTraitsFromCollectionsLinks","traitsDict","call","obj","storeNFT","dictWithOneKey","tmpKey","Object","keys","preprocessTraits","token_metadata","copies","payout","toString","tokenMetadata","token_owner_id","mintToCommonCollection","traitKey","ExploreCollectionsPage","initialState","payouts","fetching","previewNftSlice","createSlice","reducers","success","action","nft","payload","failure","toggleFetching","setPayouts","reset","previewNftReducer","reducer","formatOptionalPrice","price","formatPrice","getPrice","uid","tokenPrices","stringPrice","toLocaleString","useGrouping","utils","format","formatNearAmount","buildUID","tokenId","freeze","nep171","methods","nep177","nep178","nep181","nep199","resource","options","controller","AbortController","setTimeout","abort","signal","clearTimeout","Marketplace","contractAPI","fetchWithTimeout","isIPFS","require","getRealUrl","urlHash","storageLink","endsWith","cid","getNftMintedSiteInfo","PARAS","holder","token_id","split","nftLink","convertStandardNFT","mediaUrl","media_hash","Promise","reject","resolve","ownerId","mediaURL","referenceURL","reference_hash","mintSite","getMintbaseNFT","jsonNFT","Account","getConvertedNFT","jsonNft","nftAPI","account_id","from_index","balance","max_len_payout","marketAPI","tokens","has_next_batch","total_count","prices","forEach","nft_contract_id","tokenUID","token_uid","batchRequest","batch","request","errors","all","getNFTsByContractAndTokenId","tokenPrice","getNftPayouts","TREASURY_PERCENT","rawRoyalties","royalties","payoutKey","parseInt","highestPayout","payoutVal","addExtraContracts","curContracts","contract","includes","getUserNfts","nftContracts","fetchNfts","nfts","flat","withAuthData","Child","signedIn","PreviewNftImage","link","Hr","color","DropDownMjolBlueButton","buttonContent","initialVisible","visible","setVisible","ItemMarketStatus","IconText","icon","getPercentage","percentage","maxValue","MAX_ITEM_PRICE","getStringPercentage","minValue","maximumFractionDigits","PreviewAttribute","shrinkValue","string","chunkSize","sizeToSplit","shortenString","navigator","clipboard","writeText","place","delayShow","PreviewAttributes","attributes","attribute","NftPreviewTitle","ShareIcon","cx","cy","r","x1","y1","x2","y2","NftPreviewCollectionLink","NftPreviewInfo","statusElement","ownerAttributes","formattedPayouts","entries","kv","element","tab","DarkBlueGradientButton","ConnectWalletButton","DarkBlueMjolText","NearBlackLogo","logo","PreviewNftPrice","withPriceContainer","pending","marketNftTransactionSlice","commit","giveApprove","parseNearAmount","json_nft","msg","buyNftWithPayouts","nearAmount","unlistNFT","Modal","close","closeOnBgClick","closeOnEscape","modalRef","useRef","onKeydown","document","addEventListener","removeEventListener","ref","current","backgroundColor","SinglePayout","PayoutsPreview","treasury","rest","reduce","b","receive","InputPriceModal","imgSrc","closeModal","useForm","mode","defaultValues","register","watch","handleSubmit","formState","isValid","step","message","objectFit","aspectRatio","disabled","SellNftContainer","NftContractNotSupported","NotListedNftContainer","useParams","preview","dispatch","actions","p","fetchNft","nftStatus","isListed","LISTED","CAN_SELL","CAN_BUY","FREE","useNftMarketStatus","buyNft","sellNft","unlistNft","NOT_SUPPORTED","getStatus","Logout","navigate","useNavigate","signOut","SearchInput","isTyping","onCancel","onSearch","NftFilters","CardLoader","gradient","background","CardsGridContainer","CardListLoader","ImageBlock","scrollPosition","loading","setLoading","effect","threshold","afterLoad","MintedBlock","market","TitleBlock","CollectionBlock","PriceBlock","Card","previewLink","CardGrid","hasMore","total","exploreNftsSlice","setPageData","exploreNftsReducer","getMarketNfts","marketNfts","ProfileNftsTab","fetchMarketNfts","trackWindowScroll","next","scrollThreshold","loader","dataLength","endMessage","ExploreNftsPage","totalItems","ProfileCollectionsPage","All","Listed","History","activeTab","contracts","history","profileNftsSlice","changeTab","addNft","resetNfts","profileNftsReducer","ProfileHistoryFetch","EmptyCardList","motion","div","initial","rotate","animate","transition","repeatType","duration","repeat","Infinity","ProfileNftsFetch","fetchMyNfts","MjolBlueGradientButton","isActive","ProfileNavigationBar","child","useMemo","AppRouter","ProfileNftsPage","App","previewReducer","combineReducers","navbarReducer","exploreReducer","profileReducer","rootReducer","configureStore","ReactDOM","render","StrictMode","getElementById","parseWasm","wasmb64","decode","strb64","Buffer","Uint8Array","atob","trim","c","charCodeAt"],"mappings":"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","file":"static/js/main.44261c15.chunk.js","sourcesContent":["export enum NetworkEnv {\n    MAINNET = \"mainnet\",\n    TESTNET = \"testnet\",\n    DEVELOPMENT = \"development\",\n    BETANET = \"betanet\",\n    PRODUCTION = \"production\",\n    LOCAL = \"local\",\n    TEST = \"test\",\n    CI = \"ci\",\n    CI_BETANET = \"ci-betanet\"\n}","export const MJOL_MARKET_CONTRACT_ID = 'market.mjol.near'","import {Contract, keyStores, Near, WalletConnection} from \"near-api-js\";\nimport {getConfig} from \"./config\";\nimport {NetworkEnv} from \"./network\";\n\nexport const network = NetworkEnv.MAINNET\nexport const config = getConfig(network)\n\nconst near = new Near({\n    keyStore: new keyStores.BrowserLocalStorageKeyStore(),\n    ...config,\n})\n\nexport const wallet = new WalletConnection(near, config.contractName)\n\n// Initializing our setup APIs by setup name and configuration\nexport const contract = new Contract(wallet.account(), config.contractName, {\n    // View methods are read only. They don't modify the state, but usually return some value.\n    viewMethods: ['get_nfts', 'get_user_nfts', 'get_nft_price'],\n    // Change methods can modify the state. But you don't receive the returned value when called.\n    changeMethods: ['buy_with_payouts', 'remove_from_market'],\n})\n\nexport const getAccountId = () => {\n    return wallet.getAccountId()\n}\n\nexport const signIn = () => {\n    wallet.requestSignIn(config.contractName)\n        .then()\n        .catch()\n}\n\nexport const signOut = () => {\n    wallet.signOut()\n}","import {NetworkEnv} from \"./network\";\nimport {NearConfig} from \"near-api-js/lib/near\";\nimport {MJOL_MARKET_CONTRACT_ID} from \"./contract-names\";\n\n\nexport interface Config extends NearConfig {\n    contractName: string,\n    explorerUrl?: string,\n    keyPath?: string\n}\n\nexport const getConfig = (env: NetworkEnv): Config => {\n    switch (env) {\n        case NetworkEnv.PRODUCTION:\n        case NetworkEnv.MAINNET:\n            return {\n                networkId: 'mainnet',\n                nodeUrl: 'https://rpc.mainnet.near.org',\n                contractName: MJOL_MARKET_CONTRACT_ID,\n                walletUrl: 'https://wallet.near.org',\n                helperUrl: 'https://helper.mainnet.near.org',\n                explorerUrl: 'https://explorer.mainnet.near.org',\n            };\n        case NetworkEnv.DEVELOPMENT:\n        case NetworkEnv.TESTNET:\n            return {\n                networkId: 'testnet',\n                nodeUrl: 'https://rpc.testnet.near.org',\n                contractName: MJOL_MARKET_CONTRACT_ID,\n                walletUrl: 'https://wallet.testnet.near.org',\n                helperUrl: 'https://helper.testnet.near.org',\n                explorerUrl: 'https://explorer.testnet.near.org',\n            };\n        case NetworkEnv.BETANET:\n            return {\n                networkId: 'betanet',\n                nodeUrl: 'https://rpc.betanet.near.org',\n                contractName: MJOL_MARKET_CONTRACT_ID,\n                walletUrl: 'https://wallet.betanet.near.org',\n                helperUrl: 'https://helper.betanet.near.org',\n                explorerUrl: 'https://explorer.betanet.near.org',\n            };\n        case NetworkEnv.LOCAL:\n            return {\n                networkId: 'local',\n                nodeUrl: 'http://localhost:3030',\n                keyPath: `${process.env.HOME}/.near/validator_key.json`,\n                walletUrl: 'http://localhost:4000/wallet',\n                contractName: MJOL_MARKET_CONTRACT_ID,\n            };\n        case NetworkEnv.TEST:\n        case NetworkEnv.CI:\n            return {\n                networkId: 'shared-test',\n                nodeUrl: 'https://rpc.ci-testnet.near.org',\n                contractName: MJOL_MARKET_CONTRACT_ID,\n                masterAccount: 'test.near',\n            };\n        case NetworkEnv.CI_BETANET:\n            return {\n                networkId: 'shared-test-staging',\n                nodeUrl: 'https://rpc.ci-betanet.near.org',\n                contractName: MJOL_MARKET_CONTRACT_ID,\n                masterAccount: 'test.near',\n            };\n        default:\n            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)\n    }\n}\n\n// Why do we need that?\n// module.exports = getConfig;\n","import BN from \"bn.js\";\n\n// 0.0000000003 Ⓝ\nexport const GAS = new BN(\"300000000000000\");\n\n// 0.1 Ⓝ\nexport const SM_DEPOSIT = new BN(\"100000000000000000000000\")\n\n// one yocto Ⓝ\nexport const YOCTO_NEAR = new BN(\"1\");\n\n","import BN from \"bn.js\";\nimport {wallet} from \"../enviroment/near\";\nimport {MJOL_MARKET_CONTRACT_ID} from \"../enviroment/contract-names\";\nimport {GAS, SM_DEPOSIT} from \"../constants\";\nimport {ContractId} from \"../../models/types\";\n\nexport interface ViewFunctionOptions {\n    contractId: ContractId,\n    methodName: string,\n    args: object\n}\n\nexport interface FunctionCallOptions extends ViewFunctionOptions {\n    gas?: BN,\n    attachedDeposit?: BN,\n    walletCallbackUrl?: string\n}\n\nexport interface MjolViewFunctionOptions {\n    methodName: string,\n    args: object\n}\n\nexport interface MjolFunctionCallOptions extends MjolViewFunctionOptions {\n    gas?: BN,\n    attachedDeposit?: BN,\n    walletCallbackUrl?: string\n}\n\nexport function viewFunction<T = any>({contractId, methodName, args}: ViewFunctionOptions): Promise<T> {\n    return wallet.account().viewFunction(contractId, methodName, args)\n}\n\nexport const functionCall = ({\n    contractId,\n    methodName,\n    args,\n    gas,\n    attachedDeposit,\n    walletCallbackUrl\n}: FunctionCallOptions) => {\n    return wallet.account().functionCall({\n        contractId,\n        methodName,\n        args,\n        gas,\n        attachedDeposit,\n        walletCallbackUrl\n    })\n}\n\nexport function mjolViewFunction<T = any>({methodName, args}: MjolViewFunctionOptions) {\n    return viewFunction<T>({\n        contractId: MJOL_MARKET_CONTRACT_ID, methodName, args\n    })\n}\n\nexport const mjolFunctionCall = ({\n    methodName,\n    args,\n    gas = GAS,\n    attachedDeposit = SM_DEPOSIT,\n    walletCallbackUrl\n}: MjolFunctionCallOptions) => {\n    return functionCall({\n        contractId: MJOL_MARKET_CONTRACT_ID,\n        methodName,\n        args,\n        gas,\n        attachedDeposit,\n        walletCallbackUrl\n    })\n}","import {mjolViewFunction} from \"../rpc\";\nimport {CollectionTokens} from \"../types/response/collection\";\nimport {AccountId, CollectionId} from \"../../../models/types\";\n\nexport const collectionAPI = {\n\n    /**\n     * Fetches NFTs from collection.<br>\n     *\n     * @param collectionId valid collection id\n     * @param from  start index for fetching\n     * @param limit maximum amount of fetched tokens\n     */\n    fetchNfts: (collectionId: CollectionId, from: number, limit: number) =>\n        mjolViewFunction<CollectionTokens>({\n            methodName: 'get_nfts_from_collection',\n            args: {\n                collection_id: collectionId,\n                from,\n                limit\n            }\n        }),\n\n    // fetchUserCollections: (accountId: AccountId) =>\n    //     mjolViewFunction({\n    //         methodName: ''\n    //     })\n\n\n\n//     pub fn get_collection_info(&self, collection_id: CollectionId) -> Option<CollectionMetadata> {\n//     self.collections.get(&collection_id)\n// }\n//\n// pub fn get_collections_by_owner_id(&self, owner_id: AccountId) -> Vec<CollectionId> {\n//     self\n//     .collections_by_owner_id\n//         .get(&owner_id.clone())\n// .map(|x| x.to_vec())\n// .unwrap_or_else(|| vec![])\n// }\n}","export default function classNames(...classes: string[]) {\n    return classes.filter(Boolean).join(' ')\n}\n\n\nexport const grayGradient = (direction: \"left\" | \"right\") => {\n    return `linear-gradient(to ${direction}, rgb(229, 232, 235), rgba(255, 255, 255, 0))`\n}","import {Popover} from \"@headlessui/react\";\nimport {MenuIcon, XIcon} from \"@heroicons/react/outline\";\nimport React from \"react\";\nimport classNames from \"../../../utils/css-utils\";\nimport {ChevronDownIcon} from \"@heroicons/react/solid\";\n\nexport const CloseMenuButton = () => {\n    return (\n        <Popover.Button\n            className=\"bg-white rounded-md p-2 inline-flex nfts-center justify-center text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500\">\n            <span className=\"sr-only\">Close menu</span>\n            <XIcon className=\"h-6 w-6\" aria-hidden=\"true\"/>\n        </Popover.Button>\n    );\n};\n\nexport const DropDownButton = ({isOpen, tabName}) => {\n    return (\n        <Popover.Button\n            className={classNames(\n                isOpen ? 'text-gray-900' : 'text-cyan-700',\n                'group bg-light_white rounded-md inline-flex items-center ' +\n                'text-lg font-extrabold hover:text-gray-900 focus:outline-none ' +\n                'focus:bg-light_white'\n            )}\n        >\n            {tabName}\n            <ChevronDownIcon\n                className={classNames(\n                    isOpen ? 'text-gray-900' : 'text-cyan-700',\n                    'ml-2 h-5 w-5 group-hover:text-gray-900'\n                )}\n                aria-hidden=\"true\"\n            />\n        </Popover.Button>\n    );\n};\n\nexport const MenuButton = () => {\n    return (\n        <Popover.Button\n            className=\"bg-white rounded-md p-2 inline-flex nfts-center justify-center text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500\">\n            <span className=\"sr-only\">Open menu</span>\n            <MenuIcon className=\"h-6 w-6\" aria-hidden=\"true\"/>\n        </Popover.Button>\n    );\n};\n","import {Popover, Transition} from \"@headlessui/react\";\nimport {DropDownButton} from \"../../../components/Common/navbar/buttons\";\nimport React, {Fragment} from \"react\";\nimport classNames from \"../../../utils/css-utils\";\nimport {Link} from \"react-router-dom\";\n\nexport const TabsDropDownMenu = ({name, tabs, isProfile}) => {\n    return (\n        <Popover className=\"relative\">\n            {({isOpen}) => (\n                <div key={name}>\n                    <DropDownButton isOpen={isOpen} tabName={name}/>\n                    <Transition\n                        as={Fragment}\n                        enter=\"transition ease-out duration-200\"\n                        enterFrom=\"opacity-0 translate-y-1\"\n                        enterTo=\"opacity-100 translate-y-0\"\n                        leave=\"transition ease-in duration-150\"\n                        leaveFrom=\"opacity-100 translate-y-0\"\n                        leaveTo=\"opacity-0 translate-y-1\"\n                    >\n                        <Popover.Panel\n                            className={classNames(\n                                isProfile ? '-ml-20' : '-ml-4',\n                                \"absolute z-10 -ml-4 mt-3 transform px-2\"\n                            )}>\n                            <div className=\"rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 overflow-hidden\">\n                                <div className=\"relative grid gap-6 bg-white px-5 py-6 sm:gap-8 sm:p-8\">\n                                    {tabs.map(({path, name}) => (\n                                        <Link key={name} to={path}>\n                                            <div\n                                                className=\"cursor-pointer -m-3 p-3 flex items-start rounded-lg hover:bg-gray-100\"\n                                            >\n                                                <p className=\"text-medium font-medium text-gray-900\">{name}</p>\n                                            </div>\n                                        </Link>\n                                    ))}\n                                </div>\n                            </div>\n                        </Popover.Panel>\n                    </Transition>\n                </div>\n            )}\n        </Popover>\n    )\n}","export default __webpack_public_path__ + \"static/media/hammer.743d332f.png\";","export default __webpack_public_path__ + \"static/media/label6.5b6747ff.png\";","import React, {Fragment} from 'react'\nimport {Popover, Transition} from '@headlessui/react'\nimport classNames from \"../../utils/css-utils\";\nimport {CloseMenuButton, MenuButton} from \"../../components/Common/navbar/buttons\";\nimport {Link} from \"react-router-dom\";\nimport {TabsDropDownMenu} from \"./menu/TabDropDownMenu\";\nimport imgLogo from \"../../resources/hammer.png\"\nimport imgLabel from \"../../resources/label6.png\"\nimport {signIn, wallet} from \"../../business-logic/near/enviroment/near\";\n\n\nfunction SmallNavBar({tabs}) {\n    return (\n        <div className=\"grid grid-cols-2 gap-y-4 gap-x-8\">\n            {tabs.map(({path, name}) => (\n                <>\n                    {name === \"Launchpad\" || name === \"Docs\" ? (\n                        <div\n                            className=\"cursor-not-allowed text-base font-medium text-gray-900 hover:text-gray-500\">\n                            {name}\n                        </div>\n                    ) : (\n                        <Link to={path} key={name}>\n                            <div\n                                className=\"cursor-pointer text-base font-medium text-gray-900 hover:text-gray-500\">\n                                {name}\n                            </div>\n                        </Link>\n                    )}\n                </>\n            ))}\n        </div>\n    )\n}\n\nconst Navbar = React.memo(({tabs}) => {\n    const exploreTabs = tabs.explore\n    const createTabs = tabs.create\n    const profileTabs = tabs.profile\n    const singleTabs = tabs.single\n\n    return (\n        <Popover className=\"bg-white\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6\">\n                <div\n                    className=\"flex justify-between items-center py-6 md:justify-start md:space-x-10\">\n                    <div className=\"flex justify-start lg:w-0 lg:flex-1\">\n                        <Link to=\"/\">\n                            <img\n                                className=\"inline-block h-8 w-auto sm:h-10\"\n                                src={imgLogo}\n                                alt=\"\"\n                            />\n                            <img\n                                className=\"inline-block h-8 w-auto sm:h-10\"\n                                src={imgLabel}\n                                alt=\"\"\n                            />\n                        </Link>\n                    </div>\n                    <div className=\"-mr-2 -my-2 md:hidden\">\n                        <MenuButton/>\n                    </div>\n                    <Popover.Group as=\"nav\" className=\"hidden md:flex space-x-10\">\n                        <TabsDropDownMenu key=\"Explore\" name=\"Explore\" tabs={exploreTabs} isProfile={false}/>\n                        <TabsDropDownMenu key=\"Create\" name=\"Create\" tabs={createTabs} isProfile={false}/>\n                        {singleTabs.map(({name, path}) => (\n                            <div\n                                className={classNames(\n                                    name === \"Launchpad\" || name === \"Docs\" ? 'cursor-not-allowed' : 'cursor-pointer',\n                                    \"text-lg font-extrabold text-cyan-700 hover:text-gray-900\"\n                                )}>\n                                {name}\n                            </div>\n                        ))}\n                    </Popover.Group>\n                    {wallet.isSignedIn() ? (\n                        <div className=\"hidden md:flex items-center justify-end md:flex-1 lg:w-0\">\n                            <TabsDropDownMenu name=\"Profile\" tabs={profileTabs} isProfile={true}/>\n                        </div>\n                    ) : (\n                        <div className=\"hidden md:flex items-center justify-end md:flex-1 lg:w-0\">\n                            <Link to=\"/\"\n                                  onClick={signIn}\n                                  className=\"inline-flex justify-center py-1.5 px-4 font-bold text-lg font-large rounded-md text-white bg-gradient-to-br from-mjol-blue-base to-green-200 hover:from-green-200 hover:to-mjol-blue-base\"\n                            >\n                                Sign in\n                            </Link>\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            <Transition\n                as={Fragment}\n                enter=\"duration-200 ease-out\"\n                enterFrom=\"opacity-0 scale-95\"\n                enterTo=\"opacity-100 scale-100\"\n                leave=\"duration-100 ease-in\"\n                leaveFrom=\"opacity-100 scale-100\"\n                leaveTo=\"opacity-0 scale-95\"\n            >\n                <Popover.Panel focus\n                               className=\"absolute top-0 inset-x-0 p-2 transition transform origin-top-right md:hidden\">\n                    <div\n                        className=\"rounded-lg shadow-lg ring-1 ring-black ring-opacity-5 bg-white divide-y-2 divide-gray-50\">\n                        <div className=\"pt-5 pb-6 px-5\">\n                            <div className=\"flex items-center justify-between\">\n                                <div>\n                                    <Link to=\"/\">\n                                        <img\n                                            className=\"h-8 w-auto\"\n                                            src={imgLogo}\n                                            alt=\"logo\"/>\n                                    </Link>\n                                </div>\n                                <div className=\"-mr-2\">\n                                    <CloseMenuButton/>\n                                </div>\n                            </div>\n                        </div>\n                        <div key=\"Explore\" className=\"py-6 px-5 space-y-6\">\n                            <div className=\"text-cyan-700\">Explore:</div>\n                            <SmallNavBar tabs={exploreTabs}/>\n                        </div>\n                        <div key=\"Create\" className=\"py-6 px-5 space-y-6\">\n                            <div className=\"text-cyan-700\">Create:</div>\n                            <SmallNavBar tabs={createTabs}/>\n                        </div>\n                        <div className=\"py-6 px-5 space-y-6\">\n                            <SmallNavBar tabs={singleTabs}/>\n                            {wallet.isSignedIn() ? (\n                                <>\n                                    <div className=\"grid grid-cols-2 gap-y-4 gap-x-8\">\n                                        {profileTabs.filter(item => item.name !== 'Sign out').map(({name, path}) => (\n                                            <Link to={path} key={name}>\n                                                <div\n                                                    className=\"cursor-pointer text-base font-medium text-gray-900 hover:text-gray-500\"\n                                                >\n                                                    {name}\n                                                </div>\n                                            </Link>\n                                        ))}\n                                        <Link to=\"/signOut\"\n                                              className=\"cursor-pointer col-span-2 text-center font-medium text-gray-500 hover:text-gray-700\"\n                                        >\n                                            Log out\n                                        </Link>\n                                    </div>\n                                </>\n                            ) : (\n                                <div>\n                                    <Link to=\"/\"\n                                          onClick={signIn}\n                                          className=\"cursor-pointer w-full py-2 flex items-center justify-center font-bold text-lg font-large rounded-md text-white bg-gradient-to-br from-mjol-blue-base to-green-200 hover:from-green-200 hover:to-mjol-blue-base\"\n                                    >\n                                        Sign in\n                                    </Link>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </Popover.Panel>\n            </Transition>\n        </Popover>\n    )\n})\n\nexport default Navbar;","import {useDispatch, TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {AppDispatch, RootState} from \"../state/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import Navbar from \"./Navbar\";\n\nimport React from 'react';\nimport {useAppSelector} from \"../../hooks/redux\";\n\nconst NavbarContainer = () => {\n    const tabs = useAppSelector(state => state.navbar.tabs)\n\n    return <Navbar tabs={tabs}/>;\n};\n\nexport default NavbarContainer;","import React from 'react';\n\nconst GreetingText = () => {\n    return (\n        <div className=\"max-w-7xl mx-auto w-1/2 space-y-14 h-screen\">\n            <div\n                className=\"text-3xl text-left md:text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-br from-mjol-blue-base to-green-200 flex-end\">\n                Welcome to MjolNear\n            </div>\n            <div className=\"text-sm md:text-lg font-mono\">\n                The first Open NFT marketplace on Near blockchain.\n            </div>\n        </div>\n    );\n};\n\nexport default GreetingText;","import React from 'react';\nimport GreetingText from \"./GreetingText\";\n\nconst LandingPage = () => {\n    return (\n        <div className=\"px-8 py-8\">\n            <GreetingText/>\n        </div>\n    )\n};\n\nexport default LandingPage;","import React from 'react';\n\nconst NotFoundPage = React.memo(() => {\n    return (\n        <img className=\"max-w-3xl mx-auto\"\n             src=\"https://cdn.dribbble.com/users/745025/screenshots/6723888/gif_404.gif\"\n             alt=\"not found\"\n        />\n    );\n});\n\nexport default NotFoundPage;","import React from 'react';\n\nconst DarkBlueTitle = ({title, classes = undefined}) => {\n    return (\n        <div\n            className={\n                \"font-extrabold text-transparent bg-clip-text \" +\n                \"bg-gradient-to-br from-teal-900 to-mjol-blue-base \" +\n                (classes ? classes : \"text-center text-5xl md:text-6xl lg:text-7xl\")\n            }\n        >\n            {title}\n        </div>\n    );\n};\n\nexport default DarkBlueTitle;","import React from 'react';\n\n\ninterface PropTypes {\n    size?: number\n}\n\nconst MjolLoader = React.memo<PropTypes>(({size = 30}) => {\n    return (\n        <div className=\"flex items-center justify-center w-full h-full\"\n        >\n            <div\n                style={{\n                    border: \"4px solid #f3f3f3\", /* Light grey */\n                    borderTop: \"4px solid #3498db\", /* Blue */\n                    borderRadius: '50%',\n                    width: size,\n                    height: size,\n                    animation: \"spin 1s linear infinite\"\n                }}/>\n        </div>\n    );\n});\n\nexport default MjolLoader;","import React from 'react';\n\nconst BlueShadowContainer = ({children}) => {\n    return (\n        <div className=\"shadow-mjol-base-blue-drop-xl pt-10\">\n            {children}\n        </div>\n    );\n};\n\nexport default BlueShadowContainer;","const SingleCharLine = (props) => {\n    return (\n        <input\n            type={props.type}\n            name={props.id}\n            id={props.id}\n            className=\"focus:border-cyan-500 flex-1 block w-full rounded-none rounded-md sm:text-sm border-gray-300\"\n            placeholder={props.text}\n            minLength={props.minLength}\n            maxLength={props.maxLength}\n            onChange={(e) => props.setState(e.target.value)}\n        />\n    );\n};\n\nexport default SingleCharLine;","import React from \"react\";\n\nconst SingleNumberLine = (props) => {\n    return (\n        <input\n            type={props.type}\n            name={props.id}\n            id={props.id}\n            className=\"peer focus:ring-indigo-500 focus:border-cyan-500 flex-1 block w-full rounded-none rounded-md sm:text-sm border-gray-300\"\n            placeholder={props.text}\n            min={props.min}\n            max={props.max}\n            onChange={(e) => props.setState(e.target.value)}\n        />\n    );\n};\n\nexport default SingleNumberLine;","import React from \"react\";\nimport SingleCharLine from \"../lines/SingleCharLine\";\nimport SingleNumberLine from \"../lines/SingleNumberLine\";\n\n\nconst SingleLineContainer = (props) => {\n    return (\n        <div className=\"grid grid-cols-3 gap-6\">\n            <div className=\"sm:col-span-2 col-span-3\">\n                <label\n                    className=\"block font-bold text-sm text-gray-700\">\n                    {props.name}{props.required ? <b className=\"text-sm font-large text-red-500\">*</b>:<></>}\n                    {props.extra_name ? <span className={\"font-normal text-gray-400\"}>{props.extra_name}</span>:<></>}\n                </label>\n                <div className=\"mt-1 flex rounded-md shadow-sm\">\n                    {props.type === 'text' ? (\n                        <SingleCharLine name={props.name} text={props.text} type={props.type}\n                                        minLength={props.minLength} maxLength={props.maxLength} id={props.id}\n                                        setState={props.setState}\n                        />\n                    ) : (\n                        <SingleNumberLine name={props.name} text={props.text} type={props.type} min={props.min}\n                                          max={props.max} id={props.id} setState={props.setState}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default SingleLineContainer;","import React from \"react\";\n\nconst MultiLineContainer = (props) => {\n    return (\n        <div>\n            <label className=\"block text-sm font-bold text-gray-700\">\n                {props.name}\n            </label>\n            <div className=\"mt-1\">\n                      <textarea\n                          id={props.id}\n                          name={props.id}\n                          rows={props.rows}\n                          className=\"shadow-sm focus:ring-indigo-500 focus:border-cyan-500 mt-1 block w-full sm:text-sm border border-gray-300 rounded-md\"\n                          placeholder={props.text}\n                          defaultValue={''}\n                          maxLength={props.maxLength}\n                          onChange={(e) => props.setState(e.target.value)}\n                      />\n            </div>\n        </div>\n    )\n};\n\nexport default MultiLineContainer;","export default __webpack_public_path__ + \"static/media/doc-img.e24e74e9.png\";","import React from \"react\";\nimport docFileImg from \"../../../../resources/doc-img.png\";\nimport exampleJSON from \"../../../../resources/traits_example\";\n\nconst UploadFileInput = (props) => {\n    let jsonText;\n    if (props.type === \"file\"){\n        jsonText = window.URL.createObjectURL(\n            new Blob([JSON.stringify(exampleJSON, null, '\\t')],\n                {type: 'text/json'})\n        );\n    }\n    return (\n        <div>\n            <label className=\"block text-sm font-bold text-gray-700\">\n                {props.text}{props.required ? <b className=\"text-sm font-large text-red-500\">*</b> : <></>}\n                {props.extra_text ? <span className={\"font-normal text-gray-400\"}>{props.extra_text}</span> : <></>}\n                {props.type === \"file\" ?  <a className={\"hover:underline font-normal text-gray-400\"} href={jsonText} download={\"example.json\"}>Download traits_example.json</a>: <></>}\n            </label>\n\n            {props.state === null ? (\n                <div\n                    className=\"flex justify-center mt-1 px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md\">\n                    <div className=\"space-y-1 text-center\">\n                        {props.type === \"file\" ? (\n                            <svg\n                                className=\"mx-auto h-12 w-12 text-red-500\"\n                                height=\"32px\" viewBox=\"0 0 32 32\" width=\"32px\"\n                                aria-hidden=\"true\"\n                            >\n                                <g fill=\"none\" id=\"Page-1\" stroke=\"none\"><g fill=\"#929292\" id=\"icon-93-inbox-upload\"><path d=\"M16,6 L12.75,9.25 L12,8.5 L16.5,4 L21,8.5 L20.25,9.25 L17,6 L17,17 L16,17 L16,6 L16,6 Z M21,19 L27.7750244,19 L23.4000244,12 L18,12 L18,11 L24,11 L29,19 L29,20 L29,28 L4,28 L4,19 L9,11 L15,11 L15,11 L15,12 L9.59997559,12 L5.22497559,19 L12,19 L12,21 C12,22.1045695 12.8958578,23 13.9973917,23 L19.0026083,23 C20.1057373,23 21,22.1122704 21,21 L21,19 L21,19 L21,19 Z\" id=\"inbox-upload\"/></g></g></svg>\n                                ) : (\n                            <svg\n                                className=\"mx-auto h-12 w-12 text-gray-400\"\n                                stroke=\"currentColor\"\n                                fill=\"none\"\n                                viewBox=\"0 0 48 48\"\n                                aria-hidden=\"true\"\n                            >\n                                <path\n                                    d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n                                    strokeWidth={2}\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                />\n                            </svg>\n                        )}\n                        <div className=\"flex text-sm text-gray-600\">\n                            <label\n                                htmlFor={props.id}\n                                className=\"mx-auto cursor-pointer bg-white rounded-md font-medium text-blue-500 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500\"\n                            >\n                                <span>Upload {props.type}</span>\n                                <input id={props.id} name={props.id} type=\"file\" accept={props.accept}\n                                       className=\"sr-only\" onChange={(e) => props.setState(e.target.files[0])}/>\n                            </label>\n                        </div>\n                        <p className=\"text-xs text-gray-500\">{props.file_text}</p>\n                    </div>\n                </div>\n            ) : (\n                <div\n                    className=\"flex justify-start mt-1 px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md\">\n                    <div className=\"relative\">\n                        { props.type === \"file\" ? (\n                            <img width=\"100px\" src={docFileImg} alt=\"file\"/>\n                        ):(\n                            <img width=\"100px\" src={URL.createObjectURL(props.state)} alt=\"nft image\"/>\n                        )\n                        }\n                        <button\n                            className=\"absolute top-0 right-0 -mx-2 -my-2 bg-gray-900 text-white rounded-full hover:bg-gray-500 cursor-pointer\"\n                            onClick={() => props.setState(null)}>\n                            <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\n                                 stroke=\"currentColor\" aria-hidden=\"true\">\n                                <path d=\"M6 18L18 6M6 6l12 12\"/>\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n\n            )}\n        </div>\n    )\n};\n\nexport default UploadFileInput;","import {NFTStorage} from 'nft.storage'\n\nexport async function storeNFT(name: any, description: any, image: any, traits: any) {\n    const client = new NFTStorage({\n        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDYzZDFBZDhCMWIzMjQyQjFjMkUwNjE2NzcyOUNmMGEwYmIyNDE1OTUiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0MDExNjI4NTY3OSwibmFtZSI6InRldHMgZm9yIG9wZW4gbmZ0In0.gU_buy_gF4XUwptAU7Ck5_TSrfhZNLva5h2uWAusHNo'\n    })\n\n    return await client.store({\n        name,\n        description,\n        image,\n        traits\n    })\n}\n\nexport async function storeCollection(name: any, description: any, image: any, bannerImage: any, traits: any) {\n    const client = new NFTStorage({\n        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDYzZDFBZDhCMWIzMjQyQjFjMkUwNjE2NzcyOUNmMGEwYmIyNDE1OTUiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0MDExNjI4NTY3OSwibmFtZSI6InRldHMgZm9yIG9wZW4gbmZ0In0.gU_buy_gF4XUwptAU7Ck5_TSrfhZNLva5h2uWAusHNo'\n    })\n\n    return await client.store({\n        name,\n        description,\n        image,\n        bannerImage,\n        traits\n    })\n}\n\nexport function makeNftLink(nftIpfsLink: string) {\n    if (nftIpfsLink.startsWith('ipfs://')) {\n        return 'https://ipfs.io/ipfs/' + nftIpfsLink.slice(7)\n    }\n    return \"\"\n}\n","const PropertyInput = (props) => {\n    return (\n        <div className=\"col-span-6 sm:col-span-3\">\n            <label className=\"text-sm font-medium text-gray-700\">\n                {props.name}\n            </label>\n            <input\n                type={props.type}\n                name={props.id}\n                id={props.id}\n                placeholder={props.text}\n                maxLength={props.maxLength}\n                className=\"mt-1 focus:ring-indigo-500 focus:border-cyan-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n                onChange={(e) => props.setState(props.blockInd, props.ind, e.target.value)}\n            />\n        </div>\n    )\n};\n\nexport default PropertyInput;","import Lottie from \"react-lottie-player\";\nimport lottieJson from \"../../../resources/loading.json\";\nimport React from \"react\";\n\nconst CreateLoader = () => {\n    return (\n        <div className=\"flex h-screen bg-light_white justify-center\">\n            <div className=\"my-auto\">\n                <Lottie\n                    loop\n                    animationData={lottieJson}\n                    play\n                    style={{width: 200, height: 200}}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default CreateLoader;","import React, {useEffect, useState} from 'react';\nimport DarkBlueTitle from \"../../../components/Common/text/DarkBlueTitle\";\nimport MjolLoader from \"../../../components/Common/loaders/MjolLoader\";\nimport BlueShadowContainer from \"../../../components/Common/shadow/BlueShadowContainer\";\nimport SingleLineContainer from \"../nft/upload/containers/SingleLineContainer\";\nimport MultiLineContainer from \"../nft/upload/containers/MultiLineContainer\";\nimport UploadFileInput from \"../nft/upload/UploadFileInput\";\nimport {wallet} from \"../../../business-logic/near/enviroment/near\";\nimport {makeNftLink, storeCollection} from \"../../../business-logic/ipfs/upload\";\nimport {createCollection} from \"../../../business-logic/near/api/nfts/mint\";\nimport classNames from \"../../../utils/css-utils\";\nimport PropertyInput from \"../nft/upload/lines/PropertyInput\";\nimport CreateLoader from \"../../../components/Common/loaders/CreateLoader\";\n\nconst LineAlert = ({state, setState}) => {\n    return (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n            <span className=\"block sm:inline\">{state}</span>\n            <span className=\"absolute top-0 bottom-0 right-0 px-4 py-3\">\n                <svg className=\"fill-current h-6 w-6 text-red-500\" role=\"button\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     viewBox=\"0 0 20 20\"\n                     onClick={() => setState(\"\")}>\n                    <title>Close</title>\n                    <path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1\n                    1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1\n                    1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"\n                    />\n                </svg>\n            </span>\n        </div>\n    )\n};\n\nconst CreateCollectionPage = () => {\n    const MIN_TITLE_LEN = 3;\n    const MAX_TITLE_LEN = 30;\n    const MAX_DESC_LEN = 250;\n    const MIN_TRAITS_LEN = 1;\n    const MAX_TRAITS_LEN = 20;\n\n\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [fileIcon, setFileIcon] = useState(null);\n    const [fileBanner, setFileBanner] = useState(null);\n    const [fileTraits, setFileTraits] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [alertText, setAlertText] = useState(\"\");\n\n    const [hasTraits, setHasTraits] = useState(false);\n    const [toggleTraits, setToggleTraits] = useState(\"from UI\");\n    const [propertiesNum, setPropertiesNum] = useState([[\"\", [\"\"]]]);\n    const [fetchProperties, setFetchProperties] = useState(false);\n    const changeToggleMode = (newMode) => {\n        setPropertiesNum([[\"\", [\"\"]]]);\n        setToggleTraits(newMode)\n    };\n    const addPropertyBlock = () => {\n        setPropertiesNum(propertiesNum.concat([[\"\", [\"\"]]]));\n        setFetchProperties(!fetchProperties)\n    };\n    const delPropertyBlock = () => {\n        if (propertiesNum.length !== 1) {\n            const tmpNum = propertiesNum;\n            tmpNum.pop();\n            setPropertiesNum(tmpNum);\n            setFetchProperties(!fetchProperties)\n        }\n    };\n    const addProperty = (block) => {\n        const tmpNum = propertiesNum;\n        tmpNum[block][1].push(\"\");\n        setPropertiesNum(tmpNum);\n        setFetchProperties(!fetchProperties)\n    };\n    const delProperty = (block) => {\n        const tmpNum = propertiesNum;\n        if (tmpNum[block][1].length !== 1) {\n            tmpNum[block][1].pop();\n            setPropertiesNum(tmpNum);\n            setFetchProperties(!fetchProperties)\n        }\n    };\n    const setProperty = (blockInd, ind, el) => {\n        const tmpNum = propertiesNum;\n        if (ind === -1) {\n            tmpNum[blockInd][0] = el;\n        } else {\n            tmpNum[blockInd][1][ind] = el;\n        }\n        setPropertiesNum(tmpNum);\n    };\n\n    const submitForm = (e) => {\n        e.preventDefault();\n\n        setAlertText(\"\");\n        if (!wallet.isSignedIn()) {\n            return\n        }\n        if (!(title.length <= MAX_TITLE_LEN && title.length >= MIN_TITLE_LEN)) {\n            setAlertText(`Title length must be between ${MIN_TITLE_LEN} and ${MAX_TITLE_LEN} characters`);\n            return\n        }\n        if (!(description.length <= MAX_DESC_LEN)) {\n            setAlertText(`Description length must be less than ${MAX_DESC_LEN} characters`);\n            return\n        }\n        if (fileIcon === null) {\n            setAlertText(`Please upload your collection icon file`);\n            return\n        }\n\n        console.log(\"Create Collection\")\n        if (hasTraits) {\n            if (toggleTraits === 'from File') {\n                if (fileTraits === null) {\n                    setAlertText(`Please upload your traits json file`);\n                    return;\n                }\n                let reader = new FileReader();\n                reader.onload = function (event) {\n                    let jsonTraits = JSON.parse(event.target.result);\n                    setIsLoading(true);\n                    storeCollection(title, description, fileIcon, fileBanner, jsonTraits).then(res => {\n                        prepareCollection(res)\n                        setIsLoading(false);\n                    })\n                }\n                reader.readAsText(fileTraits);\n            } else if (toggleTraits === 'from UI') {\n                let jsonTraits = {};\n                for (let pairObj of propertiesNum) {\n                    let key = pairObj[0];\n                    let valuesArray = pairObj[1];\n                    if (key === \"\") {\n                        setAlertText(`Please fill in all the traits fields or disable collection's NFTs traits`);\n                        return\n                    }\n                    for (let value of valuesArray) {\n                        if (value === \"\") {\n                            setAlertText(`Please fill in all the traits fields or disable collection's NFTs traits`);\n                            return\n                        }\n                    }\n                    jsonTraits[key] = valuesArray;\n                }\n                setIsLoading(true);\n                storeCollection(title, description, fileIcon, fileBanner, jsonTraits).then(res => {\n                    prepareCollection(res);\n                    setIsLoading(false);\n                })\n            }\n        } else {\n            setIsLoading(true);\n            storeCollection(title, description, fileIcon, fileBanner, fileTraits).then(res => {\n                prepareCollection(res);\n                setIsLoading(false);\n            })\n        }\n    }\n\n    const prepareCollection = (res) => {\n        console.log(res);\n        const ipfsMedia = makeNftLink(res.data.image.href);\n        const ipfsRef = makeNftLink(res.url);\n        const collectionMetadata = {\n            title: title,\n            desc: description,\n            media: ipfsMedia,\n            reference: ipfsRef\n        }\n        createCollection(collectionMetadata).finally(() =>\n            setIsLoading(false)\n        )\n    }\n\n    return (\n        <>\n            {isLoading ? (\n                <CreateLoader/>\n            ) : (\n                <div className=\"bg-mjol-white\">\n                    <div className=\"bg-white\">\n                        <BlueShadowContainer>\n                            <div className=\"pb-10 px-4 space-y-8\">\n                                <DarkBlueTitle title=\"Create Collection\"/>\n                            </div>\n                        </BlueShadowContainer>\n                    </div>\n                    <div className=\"max-w-7xl py-10 mx-auto px-4 sm:px-6\">\n                        <form onSubmit={submitForm}>\n                            <div className=\"shadow rounded-md overflow-hidden\">\n                                <div className=\"px-4 py-5 bg-white space-y-6 p-6\">\n                                    <SingleLineContainer name={'Title'}\n                                                         required={true}\n                                                         text={'e.g. Super Punks'}\n                                                         type={'text'}\n                                                         minLength={MIN_TITLE_LEN}\n                                                         maxLength={MAX_TITLE_LEN}\n                                                         id={'collection-title'}\n                                                         setState={setTitle}\n                                    />\n                                    <MultiLineContainer name={'Description'}\n                                                        text={'Brief description of your collection'}\n                                                        maxLength={MAX_DESC_LEN}\n                                                        rows={3}\n                                                        id={'сollection-desc'}\n                                                        setState={setDescription}\n                                    />\n\n\n                                    <UploadFileInput text=\"Upload collection's icon image\"\n                                                     extra_text=\" (200x200)\"\n                                                     required={true}\n                                                     type=\"image\"\n                                                     file_text=\"PNG, JPG, GIF up to 10MB\"\n                                                     accept=\"image/gif, image/jpeg, image/png\"\n                                                     state={fileIcon}\n                                                     setState={setFileIcon}\n                                                     id=\"upload-icon\"\n                                    />\n                                    <UploadFileInput text=\"Upload collection's horizontal banner image\"\n                                                     extra_text=\" (1000x300)\"\n                                                     required={false}\n                                                     type=\"image\"\n                                                     file_text=\"PNG, JPG up to 10MB\"\n                                                     accept=\"image/gif, image/jpeg, image/png\"\n                                                     state={fileBanner}\n                                                     setState={setFileBanner}\n                                                     id=\"upload-banner\"\n                                    />\n                                    <div>\n                                        <input id=\"has-traits\" name=\"has-traits\" type=\"checkbox\"\n                                               className=\"focus:ring-indigo-500 h-4 w-4 text-blue-500 border-gray-300\"\n                                               onChange={e => setHasTraits(e.target.checked)}/>\n                                        <label className=\"mx-1 inline-flex text-sm font-bold text-gray-700\">NFTs from\n                                            collection have traits</label>\n                                    </div>\n                                    {hasTraits ? (\n                                        <div>\n                                            <label className=\"inline-flex text-sm font-bold text-gray-700\">Upload\n                                                Traits</label>\n                                            <div className=\"my-1\">\n                                                <a onClick={() => changeToggleMode(\"from UI\")}\n                                                   className={classNames(toggleTraits === \"from UI\" ? \"bg-gray-700 text-white\" : \"text-gray-700\",\n                                                       \"cursor-pointer inline-flex items-center justify-center px-4 py-1 border text-base font-medium rounded-l-lg border-gray-700\")}>\n                                                    from UI\n                                                </a>\n                                                <a onClick={() => changeToggleMode(\"from File\")}\n                                                   className={classNames(toggleTraits === \"from File\" ? \"bg-gray-700 text-white\" : \"text-gray-700\",\n                                                       \"cursor-pointer inline-flex items-center justify-center px-4 py-1 border text-base font-medium rounded-r-lg border-gray-700\")}>\n                                                    from File\n                                                </a>\n                                            </div>\n                                            {toggleTraits === \"from UI\" ? (\n                                                <div>\n                                                    <div className=\"my-4\">\n                                                        <button\n                                                            type=\"button\"\n                                                            id=\"add\"\n                                                            onClick={addPropertyBlock}\n                                                            className=\"border px-3 py-1 rounded-md hover:bg-gray-100\"\n                                                        >\n                                                            +\n                                                        </button>\n                                                        <button\n                                                            type=\"button\"\n                                                            id=\"del\"\n                                                            onClick={delPropertyBlock}\n                                                            className=\"mx-2 border px-3 py-1 rounded-md hover:bg-gray-100\"\n                                                        >\n                                                            -\n                                                        </button>\n                                                    </div>\n                                                    {propertiesNum.map((curProps, blockInd) => (\n                                                        <div className={\"border my-4\"}>\n                                                            <div className={\"mx-2 col-span-6 grid grid-cols-6 gap-6\"}>\n                                                                <PropertyInput name={'Key #' + (blockInd + 1)}\n                                                                               type={'text'}\n                                                                               text={'e.g. Eyes'}\n                                                                               minLength={MIN_TRAITS_LEN}\n                                                                               maxLength={MAX_TRAITS_LEN}\n                                                                               ind={-1}\n                                                                               blockInd={blockInd}\n                                                                               setState={setProperty}\n                                                                               id={'mint-key-' + blockInd}\n                                                                />\n                                                                <div className={\"col-span-6 sm:col-span-3\"}>\n                                                                    {curProps[1].map((el, ind) => (\n                                                                        <PropertyInput name={'Value #' + (ind + 1)}\n                                                                                       type={'text'}\n                                                                                       text={'e.g. Green'}\n                                                                                       minLength={MIN_TRAITS_LEN}\n                                                                                       maxLength={MAX_TRAITS_LEN}\n                                                                                       blockInd={blockInd}\n                                                                                       ind={ind}\n                                                                                       setState={setProperty}\n                                                                                       id={'mint-value-' + blockInd + '-' + ind}\n                                                                        />\n                                                                    ))}\n                                                                    <button\n                                                                        type=\"button\"\n                                                                        onClick={() => addProperty(blockInd)}\n                                                                        className=\"my-2 border px-3 py-1 rounded-md hover:bg-gray-100\"\n                                                                    >\n                                                                        +\n                                                                    </button>\n                                                                    <button\n                                                                        type=\"button\"\n                                                                        onClick={() => delProperty(blockInd)}\n                                                                        className=\"my-2 mx-2 border px-3 py-1 rounded-md hover:bg-gray-100\"\n                                                                    >\n                                                                        -\n                                                                    </button>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    ))}\n                                                </div>\n                                            ) : (\n                                                <UploadFileInput text=\"\"\n                                                                 required={false}\n                                                                 type=\"file\"\n                                                                 file_text=\"JSON up to 10MB\"\n                                                                 accept=\"application/JSON\"\n                                                                 state={fileTraits}\n                                                                 setState={setFileTraits}\n                                                                 id=\"upload-traits\"\n                                                />\n                                            )\n                                            }\n                                        </div>) : (\n                                        <></>\n                                    )}\n\n                                    {alertText !== \"\" ? (\n                                        <LineAlert state={alertText} setState={setAlertText}/>\n                                    ) : (\n                                        <></>\n                                    )}\n                                </div>\n                                <div className=\"px-4 py-3 bg-gray-50 text-left sm:px-6\">\n                                    <button\n                                        type=\"submit\"\n                                        className=\"inline-flex justify-center py-2 px-6 font-bold text-lg hover:text-gray-900 font-large rounded-md text-white bg-gradient-to-br from-mjol-blue-base to-green-200 hover:from-green-200 hover:to-mjol-blue-base\"\n                                    >\n                                        Create\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            )\n            }\n        </>\n    )\n};\nexport default CreateCollectionPage;","import {GAS, SM_DEPOSIT} from \"../../constants\";\nimport {getAccountId} from \"../../enviroment/near\";\nimport {functionCall} from \"../rpc\";\n\nexport function mintToCommonCollection(tokenMetadata, payout, collectionId) {\n    const commonContactId = 'mjol.near';\n\n    const args = {\n        token_owner_id: getAccountId(),\n        token_metadata: tokenMetadata,\n    };\n    if (payout !== null) {\n        args[\"payout\"] = payout\n    }\n    if (collectionId !== null) {\n        args[\"collection_id\"] = collectionId\n    }\n    return functionCall({\n        contractId: commonContactId,\n        methodName: 'nft_mint',\n        args,\n        gas: GAS,\n        attachedDeposit: SM_DEPOSIT\n    })\n}\n\nexport function createCollection(collectionMetadata) {\n    const commonContactId = 'mjol.near';\n\n    const args = {\n        metadata: collectionMetadata,\n    };\n\n    return functionCall({\n        contractId: commonContactId,\n        methodName: 'create_collection',\n        args,\n        gas: GAS,\n        attachedDeposit: SM_DEPOSIT\n    })\n}","import React from \"react\";\n\nconst OptionInputContainer = (props) => {\n    return (\n        <div className=\"grid grid-cols-6 gap-6\">\n            <div className=\"col-span-6 sm:col-span-2\">\n                <label className=\"block text-sm font-bold text-gray-700\">\n                    {props.name}\n                </label>\n                <select\n                    id={props.id}\n                    name={props.id}\n                    className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-cyan-500 sm:text-sm\"\n                    onChange={(e) => props.setCurCollection(e.target.value)}\n                >\n                    {props.myCollections.map(name => (\n                        <option key={name[1]} value={name[1]}>{name[0]}</option>\n                    ))}\n                </select>\n                <p className=\"mt-2 text-sm text-gray-500\">If you want to mint NFT as part of your collection, you can\n                    <b className=\"cursor-pointer\"> create it</b>\n                </p>\n            </div>\n        </div>\n    )\n};\n\nexport default OptionInputContainer;","import {AccountId, ContractId} from \"../../../models/types\";\nimport {viewFunction} from \"../rpc\";\n\nexport const collectionAPI = {\n    /**\n     * Fetches information about user collections.\n     *\n     * @param accountId User\n     */\n    fetchUserCollections: ( accountId: AccountId) =>\n        viewFunction({\n            contractId: \"mjol.near\",\n            methodName: 'get_collections_by_owner_id',\n            args: {\n                owner_id: accountId\n            }\n        }),\n\n}","import {AccountId} from \"../../../models/types\";\nimport {collectionAPI} from \"./api\";\n\n\nexport async function getUserContracts(accountId: AccountId) {\n    return await collectionAPI.fetchUserCollections(accountId)\n}\n","export class NftAPI {\n\n    static async getJsonByURL(url) {\n        try {\n            const response = await fetch(url, {timeout: 30000});\n            if (!response.ok) {\n                return {error: response.statusText + ' (' + response.status + ')'}\n            }\n            try {\n                return await response.json();\n            } catch (err) {\n                return {error: 'Unable to parse json response'}\n            }\n        } catch (error) {\n            return {error}\n        }\n    }\n}","import {NftAPI} from \"../../get-utils\";\n\n\nexport async function getTraitsFromCollectionsLinks(collections) {\n    let res = {}\n    for (let collection of collections) {\n        const response = await NftAPI.getJsonByURL(collection.reference)\n        if (response.error || response.traits === null){\n            res[collection.collection_id] = {}\n        } else {\n            res[collection.collection_id] = response.traits\n        }\n    }\n    return res\n}\n","import React from \"react\";\n\nconst OptionInput = (props) => {\n    return (\n        <select\n            id={props.id}\n            name={props.name}\n            className=\"mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-cyan-500 sm:text-sm\"\n            onChange={(e) => props.setCurValues(props.choosenValues.concat({[props.name]: e.target.value}))}\n        >\n            {props.values.map(name => (\n                <option key={name} value={name}>{name}</option>\n            ))}\n        </select>\n    )\n}\n\nexport default OptionInput;","import React, {useEffect, useState} from 'react';\nimport {mintToCommonCollection} from \"../../../business-logic/near/api/nfts/mint\";\nimport SingleLineContainer from \"./upload/containers/SingleLineContainer\";\nimport MultiLineContainer from \"./upload/containers/MultiLineContainer\";\nimport OptionInputContainer from \"./upload/containers/OptionInputContainer\";\nimport UploadFileInput from \"./upload/UploadFileInput\";\nimport {makeNftLink, storeNFT} from \"../../../business-logic/ipfs/upload\";\nimport DarkBlueTitle from \"../../../components/Common/text/DarkBlueTitle\";\nimport MjolLoader from \"../../../components/Common/loaders/MjolLoader\";\nimport BlueShadowContainer from \"../../../components/Common/shadow/BlueShadowContainer\";\nimport {getAccountId, wallet} from \"../../../business-logic/near/enviroment/near\";\nimport {getUserContracts} from \"../../../business-logic/near/api/collections/get-user-collections\";\nimport {getTraitsFromCollectionsLinks} from \"../../../business-logic/near/api/collections/get-collections-traits\";\nimport OptionInput from \"./upload/lines/OptionInput\";\n\n\nconst LineAlert = ({state, setState}) => {\n    return (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n            <span className=\"block sm:inline\">{state}</span>\n            <span className=\"absolute top-0 bottom-0 right-0 px-4 py-3\">\n                <svg className=\"fill-current h-6 w-6 text-red-500\" role=\"button\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     viewBox=\"0 0 20 20\"\n                     onClick={() => setState(\"\")}>\n                    <title>Close</title>\n                    <path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1\n                    1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1\n                    1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"\n                    />\n                </svg>\n            </span>\n        </div>\n    )\n};\n\nconst CreateNftPage = () => {\n    const MIN_TITLE_LEN = 3;\n    const MAX_TITLE_LEN = 30;\n    const MAX_DESC_LEN = 250;\n    const MIN_ROYALTY = 0;\n    const MAX_ROYALTY = 50;\n\n    let [myCollections, setMyCollections] = useState([])\n    let [collectionTraits, setCollectionTraits] = useState({})\n    let [nftTraits, setNftTraits] = useState([])\n\n    const [curCollection, setCurCollection] = useState('None');\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [royalty, setRoyalty] = useState(0);\n    const [file, setFile] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [alertText, setAlertText] = useState(\"\");\n\n    useEffect(() => {\n        if (wallet.isSignedIn()) {\n            getUserContracts(getAccountId()).then(myColls => {\n                console.log(myColls)\n                getTraitsFromCollectionsLinks(myColls).then(traitsDict => {\n                    setCollectionTraits(traitsDict)\n                })\n                setMyCollections([['None', 'None']].concat([].map.call(myColls, (obj) => {\n                    console.log(obj.title, obj.collection_id)\n                    return [obj.title, obj.collection_id];\n                })))\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        console.log(\"CUR\")\n        console.log(curCollection)\n        setNftTraits([])\n    }, [curCollection])\n\n\n    const preprocessTraits = () => {\n        let traits = {}\n        for (let dictWithOneKey of nftTraits) {\n            let tmpKey = Object.keys(dictWithOneKey)[0];\n            if (dictWithOneKey[tmpKey] === 'None'){\n                delete traits[tmpKey]\n            } else {\n                traits[tmpKey] = dictWithOneKey[tmpKey]\n            }\n        }\n        return traits\n    }\n\n    const submitForm = (e) => {\n        e.preventDefault();\n        setAlertText(\"\");\n        if (!wallet.isSignedIn()) {\n            return\n        }\n        if (!(title.length <= MAX_TITLE_LEN && title.length >= MIN_TITLE_LEN)) {\n            setAlertText(`Title length must be between ${MIN_TITLE_LEN} and ${MAX_TITLE_LEN} characters`);\n            return\n        }\n        if (!(description.length <= MAX_DESC_LEN)) {\n            setAlertText(`Description length must be less than ${MAX_DESC_LEN} characters`);\n            return\n        }\n        if (!(royalty <= MAX_ROYALTY && royalty >= MIN_ROYALTY)) {\n            setAlertText(`Royalty must be less than ${MAX_ROYALTY}`);\n            return\n        }\n        if (file === null) {\n            setAlertText(`Please upload your NFT file`);\n            return\n        }\n\n        setIsLoading(true);\n        storeNFT(title,\n            description,\n            file,\n            preprocessTraits()).then(res => {\n            console.log(res);\n            const ipfsMedia = makeNftLink(res.data.image.href);\n            const ipfsRef = makeNftLink(res.url);\n            let token_metadata = {\n                title: title,\n                description: description,\n                media: ipfsMedia,\n                reference: ipfsRef,\n                copies: 1\n            };\n            let payout = null;\n            if (royalty !== 0) {\n                payout = {\n                    payout: {}\n                };\n                payout[\"payout\"][getAccountId()] = (100 * royalty).toString();\n            }\n            let collectionId = curCollection === 'None' ? null : curCollection;\n            mintToCommonCollection(token_metadata, payout, collectionId);\n            setIsLoading(false);\n        }).catch((e) => {\n                setAlertText(`Error: Can't upload file to ipfs, try again or contact to our support`);\n                setIsLoading(false);\n                console.log(e);\n            }\n        )\n\n\n    };\n\n\n    return (\n        <>\n            {isLoading ? (\n                <MjolLoader size={50}/>\n            ) : (\n                <div className=\"bg-mjol-white\">\n                    <div className=\"bg-white\">\n                        <BlueShadowContainer>\n                            <div className=\"pb-10 px-4 space-y-8\">\n                                <DarkBlueTitle title=\"Create NFT\"/>\n                            </div>\n                        </BlueShadowContainer>\n                    </div>\n                    <div className=\"max-w-7xl py-10 mx-auto px-4 sm:px-6\">\n                        <form onSubmit={submitForm}>\n                            <div className=\"shadow rounded-md overflow-hidden\">\n                                <div className=\"px-4 py-5 bg-white space-y-6 p-6\">\n                                    <SingleLineContainer name={'Title'}\n                                                         required={true}\n                                                         text={'My NFT'}\n                                                         type={'text'}\n                                                         minLength={MIN_TITLE_LEN}\n                                                         maxLength={MAX_TITLE_LEN}\n                                                         id={'mint-title'}\n                                                         setState={setTitle}\n                                    />\n                                    <MultiLineContainer name={'Description'}\n                                                        text={'Brief description for your NFT'}\n                                                        maxLength={MAX_DESC_LEN}\n                                                        rows={3}\n                                                        id={'mint-desc'}\n                                                        setState={setDescription}\n                                    />\n                                    <SingleLineContainer name={'Royalty'}\n                                                         text={'Royalties on secondary sales(%), number from 0-50'}\n                                                         type={'number'}\n                                                         min={MIN_ROYALTY}\n                                                         max={MAX_ROYALTY}\n                                                         id={'mint-royalty'}\n                                                         setState={setRoyalty}\n                                    />\n                                    <OptionInputContainer name={'Collection of NFT'}\n                                                          myCollections={myCollections}\n                                                          id={'mint-collection'}\n                                                          curCollection={curCollection}\n                                                          setCurCollection={setCurCollection}\n                                    />\n                                    {curCollection !== 'None' && Object.keys(collectionTraits[curCollection]).length > 0 ? (\n                                        <div>\n                                            <label className=\"block text-sm font-bold text-gray-700\">\n                                                Traits:\n                                            </label>\n                                            <div className=\"py-2 grid grid-cols-4 gap-4\">\n                                                {Object.keys(collectionTraits[curCollection]).map(traitKey => (\n                                                    <div className={\"sm:col-span-1 col-span-4\"}>\n                                                        <p className={\"px-2 text-sm font-bold text-gray-700\"}>{traitKey}</p>\n                                                        <OptionInput\n                                                            name={traitKey}\n                                                            values={[\"None\"].concat(collectionTraits[curCollection][traitKey])}\n                                                            id={traitKey}\n                                                            choosenValues={nftTraits}\n                                                            setCurValues={setNftTraits}\n                                                        />\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        </div>\n\n                                    ) : (\n                                        <></>\n                                    )}\n                                    <UploadFileInput text=\"Upload artwork file\"\n                                                     required={true}\n                                                     type=\"image\"\n                                                     file_text=\"PNG, JPG, GIF up to 10MB\"\n                                                     accept=\"image/gif, image/jpeg, image/png\"\n                                                     state={file}\n                                                     setState={setFile}\n                                                     id=\"upload-file\"\n                                    />\n                                    {alertText !== \"\" ? (\n                                        <LineAlert state={alertText} setState={setAlertText}/>\n                                    ) : (\n                                        <></>\n                                    )}\n                                </div>\n                                <div className=\"px-4 py-3 bg-gray-50 text-left sm:px-6\">\n                                    <button\n                                        type=\"submit\"\n                                        className=\"inline-flex justify-center py-2 px-6 font-bold text-lg hover:text-gray-900 font-large rounded-md text-white bg-gradient-to-br from-mjol-blue-base to-green-200 hover:from-green-200 hover:to-mjol-blue-base\"\n                                    >\n                                        Mint\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            )\n            }\n        </>\n    )\n};\n\nexport default CreateNftPage;\n","import React from 'react';\n\nconst ExploreCollectionsPage = () => {\n    return (\n        <div>\n            Explore collections\n        </div>\n    );\n};\n\nexport default ExploreCollectionsPage;","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {Nft} from \"../../../business-logic/models/nft\";\nimport {act} from \"react-dom/test-utils\";\n\nexport interface PreviewNftState {\n    fetching: boolean,\n    success?: boolean,\n    nft?: Nft,\n    payouts: Record<string, number>\n}\n\n\nconst initialState: PreviewNftState = {\n    payouts: {},\n    fetching: true,\n}\n\nexport const previewNftSlice = createSlice({\n    name: \"preview-nft\",\n    initialState,\n    reducers: {\n        success: (state, action: PayloadAction<Nft>) => {\n            state.nft = action.payload\n        },\n        failure: (state) => {\n            state.nft = undefined\n        },\n        toggleFetching: (state, action: PayloadAction<boolean>) => {\n            state.fetching = action.payload\n        },\n        setPayouts: (state, action: PayloadAction<Record<string, number>>) => {\n            state.payouts = action.payload\n        },\n        reset: () => initialState\n    }\n})\n\nexport const previewNftReducer = previewNftSlice.reducer","import {ContractId, NumberAmount, Optional, StringAmount, TokenId, TokenUID} from \"../../models/types\";\nimport {utils} from \"near-api-js\";\nimport {TokenPrices} from \"./types/response/market\";\n\nexport const formatOptionalPrice = (price: Optional<NumberAmount>): Optional<StringAmount> => {\n    return price === null\n        ? null\n        : formatPrice(price)\n}\n\nexport const getPrice = (uid: TokenUID, tokenPrices: TokenPrices): Optional<StringAmount> => {\n    const price = tokenPrices[uid]\n    return price === undefined\n        ? null\n        : price\n}\n\nexport const formatPrice = (price: NumberAmount): string => {\n    const stringPrice = price.toLocaleString('fullwide', {useGrouping: false})\n    return utils.format.formatNearAmount(stringPrice)\n}\n\n/**\n * Builds UID for token as `contract:token`\n */\nexport const buildUID = (contractId: ContractId, tokenId: TokenId): TokenUID => {\n    return `${contractId}:${tokenId}`\n}","import {JsonType} from './JsonType';\n\nexport type StandardInterfaceId =\n    | 'nep171'\n    | 'nep177'\n    | 'nep178'\n    | 'nep181'\n    | 'nep199'\n\n\n/**\n * Well-known smart contract interface specification\n */\nexport interface StandardInterface {\n    /** Unique interface ID */\n    id: StandardInterfaceId;\n    /** Human-readable interface name */\n    name: string;\n    /** Methods provided by interface */\n    methods: StandardInterfaceMethod[];\n}\n\nexport interface StandardInterfaceArgument {\n    name: string;\n    /**\n     * An argument can support one or multiple types\n     * (e.g. Rust's `Option<String>` becomes `['string', 'null']`)\n     */\n    type: JsonType | JsonType[];\n}\n\nexport interface StandardInterfaceMethod {\n    name: string;\n    args: StandardInterfaceArgument[];\n}\n\n/**\n * Mapping interface ID to interface specification\n */\nexport const interfaces: Readonly<Record<StandardInterfaceId, StandardInterface>> = Object.freeze({\n    nep171: {\n        id: \"nep171\",\n        name: 'NFT Core (NEP-171)',\n        methods: [\n            {\n                name: 'nft_transfer',\n                args: [\n                    {name: 'receiver_id', type: 'string'},\n                    {name: 'token_id', type: 'string'},\n                    {name: 'approval_id', type: ['number', 'null']},\n                    {name: 'memo', type: ['string', 'null']},\n                ],\n            },\n            {\n                name: 'nft_transfer_call',\n                args: [\n                    {name: 'receiver_id', type: 'string'},\n                    {name: 'token_id', type: 'string'},\n                    {name: 'approval_id', type: ['number', 'null']},\n                    {name: 'memo', type: ['string', 'null']},\n                    {name: 'msg', type: 'string'},\n                ],\n            },\n            {\n                name: 'nft_token',\n                args: [{name: 'token_id', type: 'string'}],\n            },\n        ],\n    },\n    nep177: {\n        id: \"nep177\",\n        name: 'NFT Metadata (NEP-177)',\n        methods: [\n            {\n                name: 'nft_metadata',\n                args: [],\n            },\n        ],\n    },\n    nep178: {\n        id: \"nep178\",\n        name: 'NFT Approval Management (NEP-178)',\n        methods: [\n            {\n                name: 'nft_approve',\n                args: [\n                    {name: 'token_id', type: 'string'},\n                    {name: 'account_id', type: 'string'},\n                    {name: 'msg', type: ['string', 'null']},\n                ],\n            },\n            {\n                name: 'nft_revoke',\n                args: [\n                    {name: 'token_id', type: 'string'},\n                    {name: 'account_id', type: 'string'},\n                ],\n            },\n            {\n                name: 'nft_revoke_all',\n                args: [{name: 'token_id', type: 'string'}],\n            },\n            {\n                name: 'nft_is_approved',\n                args: [\n                    {name: 'token_id', type: 'string'},\n                    {name: 'approved_account_id', type: 'string'},\n                    {name: 'approval_id', type: ['number', 'null']},\n                ],\n            },\n        ],\n    },\n    nep181: {\n        id: \"nep181\",\n        name: 'Non-Fungible Token Enumeration (NEP-181)',\n        methods: [\n            {\n                name: 'nft_total_supply',\n                args: [],\n            },\n            {\n                name: 'nft_tokens',\n                args: [\n                    {name: 'from_index', type: ['string', 'null']},\n                    {name: 'limit', type: ['number', 'null']},\n                ],\n            },\n            {\n                name: 'nft_supply_for_owner',\n                args: [{name: 'account_id', type: 'string'}],\n            },\n            {\n                name: 'nft_tokens_for_owner',\n                args: [\n                    {name: 'account_id', type: 'string'},\n                    {name: 'from_index', type: ['string', 'null']},\n                    {name: 'limit', type: ['number', 'null']},\n                ],\n            },\n        ],\n    },\n    nep199: {\n        id: \"nep199\",\n        name: 'Standard for a Multiple-Recipient-Payout mechanic on NFT Contracts (NEP-199)',\n        methods: [\n            {\n                name: 'nft_payout',\n                args: [\n                    {name: 'token_id', type: 'string'},\n                    {name: 'balance', type: 'U128'},\n                    {name: 'max_len_payout', type: 'u32'},\n                ],\n            },\n            {\n                name: 'nft_transfer_payout',\n                args: [\n                    {name: 'receiver_id', type: 'AccountId'},\n                    {name: 'token_id', type: 'string'},\n                    {name: 'approval_id', type: 'u64'},\n                    {name: 'balance', type: 'U128'},\n                    {name: 'max_len_payout', type: 'u32'},\n                ],\n            },\n        ],\n    },\n});\n","export interface TimeoutRequestInit extends RequestInit {\n    timeout: number\n}\n\nexport async function fetchWithTimeout(resource: RequestInfo, options: TimeoutRequestInit) {\n    const {timeout} = options\n    const controller = new AbortController();\n    const id = setTimeout(() => controller.abort(), timeout);\n    const response = await fetch(resource, {\n        ...options,\n        signal: controller.signal\n    });\n    clearTimeout(id);\n    return response;\n}","import {AccountId, ContractId} from \"../../../models/types\";\nimport {QueryResponseKind} from \"near-api-js/lib/providers/provider\";\nimport {JsonRpcProvider} from \"near-api-js/lib/providers\";\nimport {contractAccordance} from \"./parser/methods\";\nimport {parseContract} from \"./parser/lib\";\nimport {fetchWithTimeout} from \"../core\";\n\n\ninterface ViewCode extends QueryResponseKind {\n    code_base64: string\n}\n\n\nexport const contractAPI = {\n    /**\n     * Fetches all NFT stores (contracts) for given users.\n     *\n     * @param accountId NEAR valid account\n     */\n    fetchUserTokenContracts: (accountId: AccountId): Promise<ContractId[]> =>\n        fetchWithTimeout(\n            `https://helper.mainnet.near.org/account/${accountId}/likelyNFts`,\n            {timeout: 8000}\n        ).then(response => response.json()\n        ).catch(() => []),\n\n    /**\n     * Extracts exported functions from NEAR smart contract\n     *\n     * @param contractId NEAR contract\n     */\n    viewMethods: (contractId: ContractId) =>\n        new JsonRpcProvider('https://rpc.mainnet.near.org/')\n            .query<ViewCode>({\n                account_id: contractId,\n                finality: 'final',\n                request_type: 'view_code'\n            })\n            .then(response => contractAccordance(parseContract(response.code_base64)))\n}","export enum Marketplace {\n    MJOL = 'mjol.near',\n    PARAS = 'x.paras.near',\n    MINTBASE = 'mintbase.near',\n    MINTBASE1 = 'mintbase1.near'\n}","import {NftAPI} from \"../../get-utils\";\nimport {viewFunction} from \"../rpc\";\nimport {Nft} from \"../../../models/nft\";\nimport {buildUID, getPrice} from \"../utils\";\nimport {Marketplace} from \"../contracts\";\nimport {TokenPrices} from \"../types/response/market\";\n\nconst isIPFS = require('is-ipfs')\n\nfunction getRealUrl(url: string, urlHash?: string, contractId?: string) {\n    let storageLink = 'https://ipfs.fleek.co/ipfs/';\n\n    if (contractId && contractId.endsWith('mintbase1.near')) {\n        storageLink = 'https://arweave.net/';\n    }\n\n    if (url) {\n        if (url.startsWith(\"http\")) {\n            return url;\n        } else if (isIPFS.cid(url)) {\n            return storageLink + url;\n        }\n    }\n    if (urlHash && isIPFS.cid(urlHash)) {\n        return storageLink + urlHash;\n    }\n    return null\n}\n\nfunction getNftMintedSiteInfo(nft: any, contractId: string) {\n    if (contractId === Marketplace.PARAS) {\n        const holder = nft.token_id.split(':')[0];\n        return {\n            name: 'Paras',\n            nftLink: `https://paras.id/token/x.paras.near::${holder}/${nft.token_id}`\n        }\n    }\n    if (contractId.endsWith('mintbase1.near')) {\n        return {\n            name: 'Mintbase',\n            nftLink: `https://www.mintbase.io/thing/${nft.metadata.reference}:${contractId}`\n        }\n    }\n    // if (contractId === 'pluminite.near') {\n    //     return new MintSite(\n    //         'Pluminite',\n    //         `https://pluminite.com/#/gem/${nft.token_id}`\n    //     )\n    // }\n\n    if (contractId.endsWith('mjol.near')) {\n        return {\n            name: 'MjolNear',\n            nftLink: `https://mjolnear.com/nft/${contractId}/${nft.token_id}`\n        }\n    }\n    return {\n        name: 'unsupported contract',\n        nftLink: ''\n    }\n}\n\n// Input example:\n//\n// token_id: '56178:34',\n// owner_id: 'turk.near',\n// metadata: {\n//   title: 'Scent of a Cloud #34',\n//   description: null,\n//   media: 'bafybeidotqecqjq37mab2o4tlqevevpn5kgjhgeblj7zlscxt6g2rxrkau',\n//   media_hash: null,\n//   copies: 111,\n//   issued_at: '1638389142491715689',\n//   expires_at: null,\n//   starts_at: null,\n//   updated_at: null,\n//   extra: null,\n//   reference: 'bafybeicq6hg6azxaymzay7bi3cu2ozjcd7fclmqy56dzg5o5nttuzaklka',\n//   reference_hash: null\n// },\n// approved_account_ids: {}\nfunction convertStandardNFT(contractId: string, nft: any, tokenPrices: TokenPrices): Promise<Nft> {\n    const metadata = nft.metadata;\n    const mediaUrl = getRealUrl(metadata.media, metadata.media_hash, contractId);\n    if (!mediaUrl) {\n        return Promise.reject(\"Standard NFT has no media URL\")\n    }\n    const uid = buildUID(contractId, nft.token_id)\n    return Promise.resolve({\n        contractId,\n        tokenId: nft.token_id || nft.id,\n        ownerId: nft.owner_id,\n        title: metadata.title,\n        description: metadata.description,\n        copies: metadata.copies,\n        mediaURL: mediaUrl,\n        referenceURL: getRealUrl(metadata.reference, metadata.reference_hash, contractId),\n        mintSite: getNftMintedSiteInfo(nft, contractId),\n        price: getPrice(uid, tokenPrices)\n    })\n}\n\n// nfts example\n// id: 68,\n// owner_id: { Account: 'turk.near' },\n// approvals: {},\n// metadata: {\n//   title: null,\n//   description: null,\n//   media: null,\n//   media_hash: null,\n//   copies: 5,\n//   issued_at: null,\n//   expires_at: null,\n//   starts_at: null,\n//   updated_at: null,\n//   extra: null,\n//   reference: 'MIILJWlP432tEAhhhXTDwGeEMM35XxOmDKy2YFRy96Y',\n//   reference_hash: null\n// },\n// royalty: { split_between: [Object], percentage: [Object] },\n// split_owners: null,\n// minter: 'kiora.near',\n// loan: null,\n// composeable_stats: { local_depth: 0, cross_contract_children: 0 },\n// origin_key: null\n// -----------------------------------------\n// JSON example:\n// category: 'membership',\n// description: 'This token represents Proof of Attendance (PoA) for a single NEAR account at the MetaBUIDL Open House. The bearer of this token was one of the first 100 accounts that registered for the event.',\n// copies: 10,\n// media_hash: 'Zty1W1Xe8pp3sO6nBjJNIGgOfFV2E_xm25Hfm3rb1Dk',\n// lock: null,\n// visibility: 'safe',\n// youtube_url: null,\n// animation_url: null,\n// animation_hash: null,\n// document: null,\n// document_hash: null,\n// royalty: null,\n// royalty_perc: 0.1,\n// split_revenue: null,\n// tags: [ 'nearedu', 'metabuidl', 'hackathon', 'metaverse' ],\n// media: 'https://arweave.net/Zty1W1Xe8pp3sO6nBjJNIGgOfFV2E_xm25Hfm3rb1Dk',\n// extra: [\n// {\n//   trait_type: 'Start Date',\n//   value: 1630521000,\n//   display_type: 'date'\n// },\n// { trait_type: 'End Date', value: 1630521000, display_type: 'date' },\n// { trait_type: 'website', value: 'https://near.university/' }\n// ],\n// title: 'NEAR University Metaverse',\n// store: 'nuniversity.mintbase1.near',\n// external_url: 'https://near.university/',\n// type: 'NEP171'\nasync function getMintbaseNFT(contractId: string, nft: any, tokenPrices: TokenPrices): Promise<Nft> {\n    const metadata = nft.metadata;\n    const url = await viewFunction({\n            contractId,\n            methodName: 'nft_token_uri',\n            args: {\n                token_id: nft.id.toString()\n            }\n        }\n    )\n    const jsonNFT = await NftAPI.getJsonByURL(url)\n    const mediaUrl = getRealUrl(jsonNFT.media, jsonNFT.media_hash, contractId)\n    if (!mediaUrl) {\n        return Promise.reject(\"Mintbase NFT has no media URL\")\n    }\n    const uid = buildUID(contractId, nft.id.toString())\n    return Promise.resolve({\n        contractId,\n        tokenId: nft.id.toString(),\n        ownerId: nft.owner_id.Account,\n        title: jsonNFT.title,\n        description: jsonNFT.description,\n        copies: metadata.copies,\n        mediaURL: mediaUrl,\n        referenceURL: getRealUrl(nft.metadata.reference, nft.metadata.reference_hash, contractId),\n        mintSite: getNftMintedSiteInfo(nft, contractId),\n        price: getPrice(uid, tokenPrices)\n    })\n}\n\nexport async function getConvertedNFT(contractId: string, jsonNft: any, tokenPrices: TokenPrices) {\n    if (contractId.endsWith('mintbase1.near')) {\n        return getMintbaseNFT(contractId, jsonNft, tokenPrices)\n    }\n    return convertStandardNFT(contractId, jsonNft, tokenPrices)\n}","import {viewFunction} from \"../rpc\";\nimport {AccountId, ContractId, StringAmount, TokenId} from \"../../../models/types\";\n\nexport interface Payouts {\n    payout: Record<AccountId, StringAmount>\n}\n\nexport const nftAPI = {\n    /**\n     * Fetches information about NFT.\n     * Currently, supports any type of responses.\n     *\n     * @param contractId NEAR contract where NFT is stored.\n     * @param tokenId NFT token\n     */\n    fetchNft: (contractId: ContractId, tokenId: TokenId) =>\n        viewFunction({\n            contractId,\n            methodName: 'nft_token',\n            args: {\n                token_id: tokenId\n            }\n        }),\n\n\n    /**\n     * Fetches user tokens.\n     * @see [Non-Fungible Token Enumeration (NEP-181)]{@link https://nomicon.io/Standards/NonFungibleToken/Enumeration.html}\n     *\n     * @param contractId NEAR contract where NFT is stored.\n     * @param accountId a valid NEAR account\n     * @param limit the maximum number of tokens to return\n     * @param from a string representing an unsigned 128-bit integer,\n     * representing the starting index of tokens to return\n     */\n    fetchUserTokens: (\n        contractId: ContractId,\n        accountId: AccountId,\n        limit: number = 20,\n        from: number = 0\n    ): Promise<any[]> =>\n        viewFunction({\n            contractId,\n            methodName: 'nft_tokens_for_owner',\n            args: {\n                account_id: accountId,\n                from_index: from.toString(),\n                limit: limit\n            }\n        }),\n\n\n    /**\n     * Fetches standard NFT payouts.\n     * @see [Standard for a Multiple-Recipient-Payout mechanic on NFT Contracts (NEP-199)]{@link https://nomicon.io/Standards/NonFungibleToken/Payout.html}\n     *\n     * @param contractId NEAR contract where NFT is stored.\n     * @param tokenId NFT token\n     */\n    fetchTokenPayouts: (contractId: ContractId, tokenId: TokenId) =>\n        viewFunction<Payouts>({\n            contractId,\n            methodName: 'nft_payout',\n            args: {\n                token_id: tokenId,\n                balance: '100000000',\n                max_len_payout: 10\n            }\n        }),\n\n    /**\n     * Fetches MjolNear NFT royalties.\n     *\n     * @param contractId NEAR contract where NFT is stored.\n     * @param tokenId NFT token\n     */\n    fetchTokenRoyalties: (contractId: ContractId, tokenId: TokenId) =>\n        viewFunction({\n            contractId,\n            methodName: 'nft_royalties',\n            args: {\n                token_id: tokenId,\n                max_len_payout: 10\n            }\n        }),\n\n    fetchMintbaseNft: (url: string) => {\n\n    }\n}","import {mjolViewFunction} from \"../rpc\";\nimport {AccountId, ContractId, NumberAmount, Optional, TokenId} from \"../../../models/types\";\nimport {buildUID, formatOptionalPrice, formatPrice} from \"../utils\";\nimport {MarketTokens, MarketToken, TokenPrices} from \"../types/response/market\";\n\n\nexport const marketAPI = {\n    /**\n     * Fetches NFTs listed on market.<br>\n     * If an error occurred returns empty array.\n     *\n     * @param from  start index for fetching\n     * @param limit maximum amount of fetched tokens\n     */\n    fetchTokens: (from: number, limit: number): Promise<MarketTokens> =>\n        mjolViewFunction<MarketTokens>({\n                methodName: 'get_nfts',\n                args: {\n                    from,\n                    limit\n                }\n            }\n        ).catch(() => ({\n            tokens: [],\n            has_next_batch: false,\n            total_count: 0\n        })),\n\n    /**\n     * Fetches market NFTs prices for given user\n     *\n     * @param accountId NEAR account\n     */\n    fetchUserTokenPrices: (accountId: AccountId): Promise<TokenPrices> => {\n        const prices: TokenPrices = {}\n        return mjolViewFunction<MarketToken[]>({\n                methodName: 'get_user_nfts',\n                args: {\n                    owner_id: accountId\n                }\n            }\n        ).then(tokens => {\n                tokens.forEach(nft => {\n                        const uid = buildUID(nft.nft_contract_id, nft.token_id)\n                        prices[uid] = formatPrice(nft.price)\n                    }\n                )\n                return prices\n            }\n        ).catch(() => prices)\n    },\n\n    /**\n     * Retrieves NFT price if NFT listed on market, otherwise returns null\n     */\n    fetchTokenPrice: (contractId: ContractId, tokenId: TokenId): Promise<TokenPrices> => {\n        const tokenUID = buildUID(contractId, tokenId)\n        return mjolViewFunction<Optional<NumberAmount>>({\n                methodName: 'get_nft_price',\n                args: {\n                    token_uid: tokenUID\n                }\n            }\n        ).then(price => ({\n            [tokenUID]: formatOptionalPrice(price)\n        }))\n    }\n}","export interface BatchResult<R> {\n    values: R[],\n    errors: any[]\n}\n\n/**\n * Batch async requests\n *\n * @param batch list of elements to process\n * @param request any function that accepts value and returns {@link Promise}\n */\nexport async function batchRequest<T, R = any>(\n    batch: T[],\n    request: ((data: T) => Promise<R>)\n): Promise<BatchResult<R>> {\n    let values: R[] = []\n    let errors: any[] = []\n\n    const results = await Promise.all(\n        batch.map(data =>\n            request(data)\n                .then(value => ({value}))\n                .catch(error => ({error}))\n        )\n    )\n\n    results.forEach(result => 'error' in result\n        ? errors.push(result.error)\n        : values.push(result.value)\n    )\n\n    return {values, errors}\n}","import {getConvertedNFT} from \"../standardization\";\nimport {nftAPI} from \"./api\";\nimport {marketAPI} from \"../market\";\nimport {AccountId, ContractId, TokenId} from \"../../../models/types\";\nimport {contractAPI} from \"../contracts\";\nimport {batchRequest} from \"../batch-request\";\n\nexport const getNFTsByContractAndTokenId = async (contractId: ContractId, tokenId: TokenId) => {\n    const jsonNft = await nftAPI.fetchNft(contractId, tokenId)\n    const tokenPrice = await marketAPI.fetchTokenPrice(contractId, tokenId);\n    return getConvertedNFT(contractId, jsonNft, tokenPrice)\n}\n\nexport async function getNftPayouts(contractId: string, tokenId: string) {\n    const TREASURY_PERCENT = 2;\n\n    if (contractId === \"mjol.near\"){\n        return nftAPI.fetchTokenRoyalties(contractId, tokenId).then(rawRoyalties => {\n            let royalties: Record<string, number> = {'treasury': TREASURY_PERCENT};\n            for (let payoutKey in rawRoyalties) {\n                royalties[payoutKey] = parseInt(rawRoyalties[payoutKey]) / 100\n            }\n            delete royalties['undefined'] //delete bad minted Nfts\n            return royalties\n        })\n    }\n\n    return nftAPI.fetchTokenPayouts(contractId, tokenId)\n        .then(payouts => {\n            let royalties: Record<string, number> = {'treasury': TREASURY_PERCENT};\n            let highestPayout = null;\n            for (let payoutKey in payouts['payout']) {\n                const payoutVal = parseInt(payouts['payout'][payoutKey]) / 1000000;\n                if (!highestPayout || highestPayout[1] < payoutVal) {\n                    highestPayout = [payoutKey, payoutVal]\n                }\n                royalties[payoutKey] = payoutVal\n            }\n            if (highestPayout) {\n                delete royalties[highestPayout[0]]\n            }\n            delete royalties['undefined'] //delete bad minted Nfts\n\n            return royalties\n        })\n}\n\nfunction addExtraContracts(curContracts: string[]) {\n    const extraContracts = ['mjol.near'];\n    for (let contract of extraContracts) {\n        if (!curContracts.includes(contract)) {\n            curContracts.push('mjol.near');\n        }\n    }\n    return curContracts\n}\n\nexport async function getUserNfts(accountId: AccountId) {\n\n    let nftContracts = await contractAPI.fetchUserTokenContracts(accountId)\n    nftContracts = addExtraContracts(nftContracts)\n    const tokenPrices = await marketAPI.fetchUserTokenPrices(accountId);\n\n    const fetchNfts = (contractId: ContractId) =>\n        nftAPI.fetchUserTokens(contractId, accountId)\n            .then(nfts => batchRequest(nfts,\n                token => getConvertedNFT(contractId, token, tokenPrices)).then(result => result.values)\n            )\n\n    return batchRequest(nftContracts, fetchNfts)\n        .then(result => result.values.flat())\n}\n\n\n","import React from \"react\";\nimport {wallet} from \"../business-logic/near/enviroment/near\";\n\nexport interface SignedInProps {\n    accountId: string,\n    signedIn: boolean\n}\n\nfunction withAuthData<T>(Child: React.ComponentType<T & SignedInProps>):React.FC<T> {\n    return (props) =>\n        <Child {...props}\n               accountId={wallet.getAccountId()}\n               signedIn={wallet.isSignedIn()}\n        />\n}\n\nexport default withAuthData;","import React from 'react';\n\ninterface PropTypes {\n    link: string\n}\n\nconst PreviewNftImage = React.memo<PropTypes>(({link}) => {\n    return (\n        <div className=\"justify-self-center md:justify-self-end w-full max-w-2xl\">\n            <img src={link}\n                 alt=\"media not supported\"\n                 className=\"w-full max-h-xl object-contain\"\n            />\n        </div>\n    );\n});\n\nexport default PreviewNftImage;","import React from 'react';\n\nconst Hr = React.memo(({color = \"bg-black\"}) => {\n    return <div className={color + \" h-px\"}/>\n});\n\nexport default Hr;","import {ChevronUpIcon} from '@heroicons/react/solid'\nimport React, {useState} from \"react\";\nimport classNames from \"../../../utils/css-utils\";\nimport Hr from \"../borders/Hr\";\n\nexport default function DropDownMjolBlueButton({buttonContent, children, initialVisible = false}) {\n\n    const [visible, setVisible] = useState(initialVisible)\n\n    return (\n        <div>\n            <button onClick={() => setVisible(!visible)}\n                    className={\n                        classNames(visible\n                                ? \"rounded-t-lg\"\n                                : \"rounded-lg\",\n                            \"group flex justify-between p-5 w-full text-md font-semibold text-left bg-blue-100\"\n                        )\n                    }\n            >\n                {buttonContent}\n                <ChevronUpIcon\n                    className={\n                        classNames(visible\n                                ? \"\"\n                                : \"rotate-180\",\n                            \"transform duration-200 w-6 h-6 text-gray-500 group-hover:text-black\"\n                        )\n                    }\n                />\n            </button>\n            {visible &&\n                <>\n                    <div className=\"px-2 bg-blue-100\">\n                        <Hr color=\"bg-gray-600\"/>\n                    </div>\n                    {children}\n                </>\n            }\n        </div>\n    )\n}","import React from 'react';\n\nconst IconText = ({icon, text}) => {\n    return (\n        <div className=\"gap-2 flex flex-row items-center\">\n            {icon}\n            {text}\n        </div>\n    );\n};\n\nexport default IconText;","export enum ItemMarketStatus {\n    // Item is owned by current user and listed on transaction.\n    LISTED = \"LISTED\",\n\n    // Item is owned by current user and not listed on transaction.\n    CAN_SELL = \"CAN_SELL\",\n\n    // Item is owned by another user and listed on transaction\n    CAN_BUY = \"CAN_BUY\",\n\n    // Item is owned by another user and not listed on transaction.\n    FREE = \"FREE\",\n\n    // Item contract is not supported\n    NOT_SUPPORTED = \"NOT_SUPPORTED\",\n}\n\n\nexport interface TransactionStatus {\n    pending: boolean | undefined,\n    success: boolean | undefined\n}","export const shortenString = (string, chunkSize = 5, sizeToSplit = 15) => {\n    if (string.length > sizeToSplit) {\n        return string.slice(0, chunkSize) + '..' + string.slice(-chunkSize)\n    }\n    return string\n}\n\nexport const getPercentage = (\n    value,\n    percentage,\n    minValue = 0,\n    maxValue = MAX_ITEM_PRICE,\n    defaultValue = 0\n) => {\n    if (value < 0 || value > maxValue) {\n        return defaultValue\n    }\n    return (percentage / 100) * value\n}\n\nexport const getStringPercentage = (\n    value,\n    percentage,\n    minValue = 0,\n    maxValue = MAX_ITEM_PRICE,\n    defaultValue = 0,\n    maximumFractionDigits = 4\n) => {\n    return getPercentage(value, percentage, minValue, maxValue, defaultValue)\n        .toLocaleString(\n            'en-US',\n            {maximumFractionDigits}\n        )\n}\n\nexport const MAX_ITEM_PRICE = 10_000_000","import React from 'react';\nimport {shortenString} from \"../../../utils/string\";\nimport ReactTooltip from 'react-tooltip';\n\nconst PreviewAttribute = React.memo(({name, value}) => {\n    let shrinkValue = shortenString(value)\n    return (\n        <div className=\"flex flex-row justify-between\">\n            <div className=\"font-semibold\">{name}</div>\n            <p className=\"cursor-pointer\"\n               data-tip={value}\n               onClick={() => navigator.clipboard.writeText(value)}\n            >\n                {shrinkValue}\n            </p>\n            <ReactTooltip className='text-sm' type='dark' place='bottom' delayShow={200}/>\n        </div>\n    );\n});\n\nexport default PreviewAttribute;","import React from 'react';\nimport PreviewAttribute from \"./PreviewAttribute\";\n\nconst PreviewAttributes = ({attributes}) => {\n    return (\n        <div>\n            {attributes.length === 0\n                ? <div>Not found</div>\n                : attributes.map(attribute =>\n                    <PreviewAttribute key={attribute.name}\n                                      name={attribute.name}\n                                      value={attribute.value}\n                    />\n                )}\n        </div>\n    );\n};\n\nexport default PreviewAttributes;","import React from 'react';\n\ninterface PropTypes {\n    title: string\n}\n\nconst NftPreviewTitle = React.memo<PropTypes>(({title}) => {\n    return (\n        <div className=\"font-extrabold text-mjol-purple-dark text-lg md:text-xl\">\n            {title}\n        </div>\n    );\n});\n\nexport default NftPreviewTitle;","import React from 'react';\n\nconst ShareIcon = () => {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"30\" viewBox=\"0 0 24 24\" fill=\"none\"\n             stroke=\"currentColor\"\n             strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"tw-mr-1\" color=\"black\">\n            <circle cx=\"18\" cy=\"5\" r=\"3\"/>\n            <circle cx=\"6\" cy=\"12\" r=\"3\"/>\n            <circle cx=\"18\" cy=\"19\" r=\"3\"/>\n            <line x1=\"8.59\" y1=\"13.51\" x2=\"15.42\" y2=\"17.49\"/>\n            <line x1=\"15.41\" y1=\"6.51\" x2=\"8.59\" y2=\"10.49\"/>\n        </svg>\n    );\n};\n\nexport default ShareIcon;\n","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport ShareIcon from \"../../Icons/ShareIcon\";\n\ninterface PropTypes {\n    name: string,\n    link: string\n}\n\nconst NftPreviewCollectionLink = React.memo<PropTypes>(({name, link}) => {\n    return (\n        <div className=\"flex flex-row justify-between\">\n            <div className=\"text-md md:text-lg font-bold text-mjol-purple-dark-t hover:bg-opacity-80 text-center\">\n                <Link to={link}>{name}</Link>\n            </div>\n            <ShareIcon/>\n        </div>\n    );\n});\n\nexport default NftPreviewCollectionLink;","import DropDownMjolBlueButton from \"../../Common/buttons/DropDownMjolBlueButton\";\nimport IconText from \"../../Icons/IconText\";\nimport {BsList} from 'react-icons/bs';\nimport {MdAccountBalanceWallet as MdAcc} from 'react-icons/md'\nimport {GrMoney} from 'react-icons/gr'\nimport {GiBuyCard} from 'react-icons/gi'\nimport {BiDna} from 'react-icons/bi'\nimport PreviewAttributes from \"../Attributes/PreviewAttributes\";\nimport NftPreviewTitle from \"./NftPreviewTitle\";\nimport NftPreviewCollectionLink from \"./NftPreviewCollectionLink\";\nimport {Nft} from \"../../../business-logic/models/nft\";\n\n\nconst NftPreviewInfo = ({nft, payouts, statusElement}) => {\n\n    const ownerAttributes = [\n        {name: \"Owner ID\", value: nft.ownerId || \"Not found\"},\n        {name: \"Token ID\", value: nft.tokenId || \"Not found\"},\n        {name: \"Contract\", value: nft.contractId || \"Not found\"}\n    ]\n\n    const formattedPayouts = Object.entries(payouts).map(kv => {\n        const [name, value] = kv\n        return {name, value: `${value}%`}\n    })\n\n    const tabs = [\n        {name: \"Description\", element: nft.description || \"Not found\", icon: <BsList/>},\n        {name: \"Attributes\", element: <PreviewAttributes attributes={ownerAttributes}/>, icon: <MdAcc/>},\n        {name: \"Royalties\", element: <PreviewAttributes attributes={formattedPayouts}/>, icon: <GrMoney/>},\n        {name: \"History\", element: \"Not found\", icon: <GiBuyCard/>},\n        {name: \"Traits\", element: \"Not found\", icon: <BiDna/>}\n    ]\n\n\n    return (\n        <div className=\"space-y-5 md:max-w-xl\">\n            <div>\n                <NftPreviewTitle title={nft.title}/>\n                <NftPreviewCollectionLink name=\"MOCK\" link=\"\"/>\n            </div>\n            {statusElement}\n            <div className=\"space-y-3\">\n                {tabs.map(tab => (\n                    <DropDownMjolBlueButton key={tab.name}\n                                            buttonContent={\n                                                <IconText icon={tab.icon}\n                                                          text={tab.name}\n                                                />\n                                            }>\n                        <div className=\"rounded-b-lg w-full bg-blue-100 text-black font-medium text-sm px-5 py-2\">\n                            {tab.element}\n                        </div>\n                    </DropDownMjolBlueButton>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default NftPreviewInfo;","import {ItemMarketStatus} from \"../state/transaction/state\";\nimport {Nft} from \"../business-logic/models/nft\";\n\nexport const useNftMarketStatus = (accountId: string, nft: Nft): ItemMarketStatus => {\n\n    const isListed = nft.price !== null\n\n    return (accountId === nft.ownerId) ?\n        isListed\n            ? ItemMarketStatus.LISTED\n            : ItemMarketStatus.CAN_SELL\n        : isListed\n            ? ItemMarketStatus.CAN_BUY\n            : ItemMarketStatus.FREE\n}","import React from 'react';\n\nconst DarkBlueGradientButton = ({title, ...props}) => {\n    return (\n        <button {...props}\n                className=\"w-full text-white font-extrabold\n                           bg-gradient-to-l from-blue-500 to-blue-800 rounded-lg px-10 py-2\n                           hover:from-blue-600\n                           hover:to-blue-800\n                           hover:shadow-mjol-gray-xs\n                           disabled:opacity-50\n                           disabled:cursor-not-allowed\"\n        >\n            {title}\n        </button>\n    )\n}\n\nexport default DarkBlueGradientButton;","import React from 'react';\nimport DarkBlueGradientButton from \"../../../Common/buttons/DarkBlueGradientButton\";\nimport {signIn} from \"../../../../business-logic/near/enviroment/near\";\n\nconst ConnectWalletButton = () => {\n    return <DarkBlueGradientButton title=\"Connect to NEAR\" onClick={signIn}/>\n};\n\nexport default ConnectWalletButton","import React from 'react';\n\nconst DarkBlueMjolText = ({text, classes = undefined}) => {\n    return (\n        <div className={\n            \"text-transparent bg-clip-text bg-gradient-to-bl from-blue-500 to-blue-800 \" +\n            (classes ? classes : \"text-center font-extrabold font-sm\")\n        }\n        >\n            {text}\n        </div>\n    );\n};\n\nexport default DarkBlueMjolText;","export default __webpack_public_path__ + \"static/media/near-protocol-near-logo.3c418991.svg\";","import React from 'react';\nimport logo from '../../../resources/near-protocol-near-logo.svg'\n\ninterface PropTypes {\n    size?: number\n}\n\nconst NearBlackLogo = React.memo<PropTypes>(({size = 15}) => {\n    return <img width={size} height={size} src={logo} alt=\"near\"/>\n});\n\nexport default NearBlackLogo;","import React from 'react';\nimport DarkBlueMjolText from \"../../Common/text/DarkBlueMjolText\";\nimport NearBlackLogo from \"../../Icons/near/NearBlackLogo\";\n\ninterface PriceProps {\n    price: string\n}\n\nconst PreviewNftPrice = React.memo<PriceProps>(({price}) => {\n    return (\n        <div className=\"flex items-center gap-2 text-xl\">\n            <DarkBlueMjolText text={price}/>\n            <NearBlackLogo/>\n        </div>\n    );\n});\n\nexport default PreviewNftPrice;","import React from 'react';\nimport PreviewNftPrice from \"../Blocks/PreviewNftPrice\";\n\ninterface PriceProps {\n    price: string\n}\n\nfunction withPriceContainer<T>(Child: React.ComponentType<T>) {\n    const wrapped: React.FC<T & PriceProps> = (props) => (\n        <div className=\"rounded-lg px-5 py-2 space-y-2 bg-blue-100\">\n            <PreviewNftPrice price={props.price}/>\n            <Child {...props}/>\n        </div>\n    );\n\n    return wrapped\n}\n\nexport default withPriceContainer;","import React from 'react';\nimport DarkBlueGradientButton from \"../../Common/buttons/DarkBlueGradientButton\";\nimport withPriceContainer from \"./withPriceContainer\";\n\nconst BuyNftContainer = (props) => {\n    return <DarkBlueGradientButton title=\"Buy NFT\" {...props}/>;\n};\n\nexport default withPriceContainer(BuyNftContainer);","import {TransactionStatus} from \"../state\";\nimport {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState: TransactionStatus = {\n    pending: undefined,\n    success: undefined\n}\n\nexport const marketNftTransactionSlice = createSlice({\n    name: 'market-nft-transaction',\n    initialState,\n    reducers: {\n        commit: (state) => {\n            state.pending = true\n        },\n        success: (state) => {\n            state.success = true\n            state.pending = false\n        },\n        failure: (state) => {\n            state.success = false\n            state.pending = false\n        },\n        reset: () => initialState\n    }\n})\n\nexport const marketNftTransactionReducer = marketNftTransactionSlice.reducer","import {utils} from \"near-api-js\";\nimport {GAS, SM_DEPOSIT, YOCTO_NEAR} from \"../../constants\";\nimport {functionCall, mjolFunctionCall} from \"../rpc\";\nimport BN from \"bn.js\";\nimport {MJOL_MARKET_CONTRACT_ID} from \"../../enviroment/contract-names\";\nimport {ContractId, StringAmount, TokenId} from \"../../../models/types\";\nimport {Nft} from \"../../../models/nft\";\n\n\nexport function giveApprove(contractId: ContractId, tokenId: TokenId, stringPrice: StringAmount, nft: Nft) {\n    const price = utils.format.parseNearAmount(stringPrice.toString());\n\n    const json_nft = {\n        \"contract_id\": nft.contractId,\n        \"token_id\": nft.tokenId,\n        \"owner_id\": nft.ownerId,\n        \"title\": nft.title,\n        \"description\": nft.description,\n        \"copies\": nft.copies ? (nft.copies).toString() : \"1\",\n        \"media_url\": nft.mediaURL,\n        \"reference_url\": nft.referenceURL,\n        \"mint_site\": nft.mintSite ? {\n            \"name\": nft.mintSite.name,\n            \"nft_link\": nft.mintSite.nftLink\n        } : {\n            \"name\": \"\",\n            \"nft_link\": \"\"\n        },\n        \"price\":price\n    }\n\n    console.log(JSON.stringify({json_nft}));\n\n    return functionCall({\n        contractId,\n        methodName: 'nft_approve',\n        args: {\n            token_id: tokenId,\n            account_id: MJOL_MARKET_CONTRACT_ID,\n            msg: JSON.stringify({json_nft})\n        },\n        gas: GAS,\n        attachedDeposit: SM_DEPOSIT\n    })\n}\n\nexport function buyNftWithPayouts(contractId: ContractId, tokenId: TokenId, price: StringAmount) {\n    const nearAmount = utils.format.parseNearAmount(price) || \"0\";\n    return mjolFunctionCall({\n        methodName: 'buy_with_payouts',\n        args: {\n            nft_contract_id: contractId,\n            token_id: tokenId\n        },\n        gas: GAS,\n        attachedDeposit: new BN(nearAmount)\n    })\n}\n\nexport function unlistNFT(contractId: ContractId, tokenId: TokenId) {\n    return mjolFunctionCall({\n        methodName: 'remove_from_market',\n        args: {\n            nft_contract_id: contractId,\n            token_id: tokenId\n        },\n        gas: GAS,\n        attachedDeposit: YOCTO_NEAR\n    })\n}","import {AppDispatch} from \"../../store\";\nimport {marketNftTransactionSlice} from \"./slice\";\nimport {buyNftWithPayouts, giveApprove, unlistNFT} from \"../../../business-logic/near/api/market/transaction\";\nimport {Nft} from \"../../../business-logic/models/nft\";\n\nexport const sellNft = (contractId: string, tokenId: string, price: string, nft: Nft) =>\n    async (dispatch: AppDispatch) => {\n        dispatch(marketNftTransactionSlice.actions.commit())\n        giveApprove(contractId, tokenId, price, nft)\n            .then(() => dispatch(marketNftTransactionSlice.actions.success()))\n            .catch(() => dispatch(marketNftTransactionSlice.actions.failure()))\n    }\n\nexport const buyNft = (contractId: string, tokenId: string, price: string) =>\n    async (dispatch: AppDispatch) => {\n        dispatch(marketNftTransactionSlice.actions.commit())\n        buyNftWithPayouts(contractId, tokenId, price)\n            .then(() => dispatch(marketNftTransactionSlice.actions.success()))\n            .catch(() => dispatch(marketNftTransactionSlice.actions.failure()))\n    }\n\n\nexport const unlistNft = (contractId: string, tokenId: string) =>\n    async (dispatch: AppDispatch) => {\n        dispatch(marketNftTransactionSlice.actions.commit())\n        unlistNFT(contractId, tokenId)\n            .then(() => dispatch(marketNftTransactionSlice.actions.success()))\n            .catch(() => dispatch(marketNftTransactionSlice.actions.failure()))\n    }\n","import React, {useEffect, useRef} from 'react'\n\nconst Modal = ({\n    close = () => {\n    },\n    closeOnBgClick = true,\n    closeOnEscape = true,\n    children,\n    style = {},\n}) => {\n    const modalRef = useRef(null)\n\n    useEffect(() => {\n        const onKeydown = (event) => {\n            if (event.key === 'Escape') {\n                close()\n            }\n        }\n\n        if (closeOnEscape) {\n            document.addEventListener('keydown', onKeydown)\n        }\n\n        return () => {\n            document.removeEventListener('keydown', onKeydown)\n        }\n    }, [])\n\n    const _bgClick = (event) => {\n        if (closeOnBgClick && event.target === modalRef.current) {\n            close()\n        }\n    }\n\n    return (\n        <div\n            ref={modalRef}\n            onClick={_bgClick}\n            className=\"fixed inset-0 z-50 flex items-center p-4\"\n            style={{\n                backgroundColor: `rgba(0, 0, 0, 0.8)`,\n                ...style,\n            }}\n        >\n            {children}\n        </div>\n    )\n}\n\nexport default Modal","import React from 'react';\nimport NearBlackLogo from \"../../../../Icons/near/NearBlackLogo\";\n\nconst SinglePayout = ({name, value}) => {\n    return (\n        <div className=\"mt-2 text-black font-bold flex items-center justify-between\">\n            <span>{name}</span>\n            <span className=\"flex gap-2 items-center\">\n                <span>{value}</span>\n                <NearBlackLogo/>\n            </span>\n        </div>\n    );\n};\n\nexport default SinglePayout;","import React from 'react';\nimport {getStringPercentage} from \"../../../../../utils/string\";\nimport SinglePayout from \"./SinglePayout\";\n\nconst PayoutsPreview = ({price, payouts}) => {\n\n    const {treasury, ...rest} = payouts\n    const royalties = Object.values(rest).reduce((a, b) => a + b, 0)\n    const receive = 100 - treasury - royalties\n\n    return (\n        <div className=\"py-3\">\n            <SinglePayout name=\"Receive:\" value={getStringPercentage(price, receive)}/>\n            <SinglePayout name=\"Fee:\" value={getStringPercentage(price, treasury)}/>\n            <SinglePayout name=\"Royalty:\" value={getStringPercentage(price, royalties)}/>\n        </div>\n    );\n};\n\nexport default PayoutsPreview;","import React from 'react';\nimport Modal from \"../../../Common/modal/Modal\";\nimport DarkBlueGradientButton from \"../../../Common/buttons/DarkBlueGradientButton\";\nimport {AiOutlineClose} from 'react-icons/ai'\nimport NearBlackLogo from \"../../../Icons/near/NearBlackLogo\";\nimport DarkBlueMjolText from \"../../../Common/text/DarkBlueMjolText\";\nimport {useForm} from \"react-hook-form\";\nimport {MAX_ITEM_PRICE} from \"../../../../utils/string\";\nimport PayoutsPreview from \"./recieve/PayoutsPreview\";\n\nconst InputPriceModal = ({close, onClick, payouts, imgSrc}) => {\n\n        const closeModal = () => {\n            close()\n            reset()\n        }\n\n        const {\n            register,\n            watch,\n            handleSubmit,\n            reset,\n            formState: {\n                isValid, errors\n            }\n        } = useForm({\n                        mode: \"onChange\",\n                        defaultValues: {\n                            price: \"\"\n                        }\n                    })\n\n        const onSubmit = ({price}) => {\n            onClick(price)\n            closeModal()\n        }\n\n        const price = watch(\"price\")\n\n        return (\n            <Modal close={closeModal}>\n                <div className=\"max-w-xs md:max-w-lg p-4 bg-gray-100 mx-2 xs:mx-auto rounded-md relative\">\n                    <div className=\"absolute right-0 top-0 pr-4 pt-4\">\n                        <AiOutlineClose onClick={closeModal} className=\"cursor-pointer\" size={20}/>\n                    </div>\n                    <DarkBlueMjolText text=\"List NFT for sale\" classes=\"text-2xl text-left font-black pb-4 text-center\"/>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-5\">\n                        <form onSubmit={handleSubmit(onSubmit)}>\n                            <div className=\"flex flex-col justify-between h-full\">\n                                <div className=\"space-y-1\">\n                                    <div className=\"text-sm text-gray-900 font-semibold\">\n                                        Price\n                                    </div>\n                                    <div className=\"flex justify-between gap-3\">\n                                        <input\n                                            min=\"0\"\n                                            className=\"\n                                               w-full\n                                               px-3 py-2 rounded-lg border-transparent text-gray-800 text-base\n                                               bg-black bg-opacity-5\n                                               focus:bg-opacity-10\n                                               focus:text-black\n                                               focus:border-transparent\n                                               focus:ring-0\n                                               \"\n                                            type=\"number\"\n                                            step=\"any\"\n                                            placeholder=\"NFT price\"\n                                            {...register(\"price\", {\n                                                required: true,\n                                                max: {\n                                                    value: MAX_ITEM_PRICE,\n                                                    message: `Maximum price is ${MAX_ITEM_PRICE} Ⓝ`\n                                                },\n                                                min: {\n                                                    value: 0,\n                                                    message: \"Minimum price is 0 Ⓝ\"\n                                                },\n                                            })}\n                                        />\n                                        <NearBlackLogo/>\n                                    </div>\n                                    {!isValid &&\n                                        <div\n                                            className=\"hidden md:block pt-1\n                                                       text-center text-gray-700 text-xs font-semibold\"\n                                        >\n                                            {errors?.price?.message}\n                                        </div>\n                                    }\n                                </div>\n                                <PayoutsPreview price={price} payouts={payouts}/>\n                            </div>\n                        </form>\n                        <img src={imgSrc} alt=\"loading\" className=\"hidden md:block rounded-2xl\" style={{\n                            width: \"100%\",\n                            objectFit: \"contain\",\n                            aspectRatio: \"1/1\"\n                        }}/>\n                    </div>\n                    <div className=\"items-center flex flex-col\">\n                        <p className=\"text-black mt-4 text-sm text-center opacity-60\">\n                            You will be redirected to\n                            NEAR Web Wallet to confirm your transaction.\n                        </p>\n                        <div className=\"mt-6\">\n                            <DarkBlueGradientButton title=\"Complete listing\"\n                                                    disabled={!isValid}\n                                                    onClick={() => handleSubmit(onSubmit)(price)}\n                                                    style={{\n                                                        width: \"300px\"\n                                                    }}/>\n                        </div>\n                    </div>\n                </div>\n            </Modal>\n        );\n    }\n;\n\nexport default InputPriceModal;","import React, {useState} from 'react';\nimport DarkBlueGradientButton from \"../../../Common/buttons/DarkBlueGradientButton\";\nimport InputPriceModal from \"./InputPriceModal\";\n\n\nconst SellNftContainer = ({onClick, payouts, imgSrc}) => {\n\n    const [visible, setVisible] = useState(false)\n\n    return (\n        <div>\n            <DarkBlueGradientButton title=\"Sell NFT\" onClick={() => setVisible(!visible)}/>\n            {visible &&\n                <InputPriceModal close={() => setVisible(false)}\n                                 onClick={onClick}\n                                 payouts={payouts}\n                                 imgSrc={imgSrc}\n                />\n            }\n        </div>\n    );\n};\n\nexport default SellNftContainer;","import React from 'react';\nimport withPriceContainer from \"./withPriceContainer\";\nimport DarkBlueGradientButton from \"../../Common/buttons/DarkBlueGradientButton\";\n\nconst UnlistNftContainer = (props: any) => {\n    return <DarkBlueGradientButton title=\"Unlist NFT\" {...props}/>;\n};\n\nexport default withPriceContainer(UnlistNftContainer);","import React from 'react';\n\nconst NftContractNotSupported = () => {\n    return (\n        <div className=\"text-center rounded-2xl bg-gray-900 p-2 font-medium text-md md:text-lg text-blue-300\">\n            Nft contract not supported\n            <div className=\"text-xs text-blue-900\">\n                See here for more information about supported NFTs.\n            </div>\n        </div>\n    );\n};\n\nexport default NftContractNotSupported;","import React from 'react';\n\nconst NotListedNftContainer = () => {\n    return (\n        <div className=\"text-center rounded-lg bg-gray-900 p-2 font-medium text-md md:text-lg text-blue-300\">\n            Nft not listed on market\n        </div>\n    );\n};\n\nexport default NotListedNftContainer;","import React, {useEffect} from 'react';\nimport {useAppDispatch, useAppSelector} from \"../../../hooks/redux\";\nimport {fetchNft} from \"../../../state/preview/nft/thunk\";\nimport withAuthData, {SignedInProps} from \"../../../hoc/withAuthData\";\nimport NotFoundPage from \"../../not-found/NotFoundPage\";\nimport {previewNftSlice} from \"../../../state/preview/nft/slice\";\nimport {useParams} from \"react-router\";\nimport MjolLoader from \"../../../components/Common/loaders/MjolLoader\";\nimport PreviewNftImage from \"../../../components/Preview/PreviewNftImage\";\nimport NftPreviewInfo from \"../../../components/Preview/Blocks/NftPreviewInfo\";\nimport {useNftMarketStatus} from \"../../../hooks/useNftMarketStatus\";\nimport ConnectWalletButton from \"../../../components/Preview/Status/connect-wallet/ConnectWalletButton\";\nimport {ItemMarketStatus} from \"../../../state/transaction/state\";\nimport BuyNftContainer from \"../../../components/Preview/Status/BuyNftContainer\";\nimport {buyNft, sellNft, unlistNft} from \"../../../state/transaction/nft/thunk\";\nimport SellNftContainer from \"../../../components/Preview/Status/sell/SellNftContainer\";\nimport UnlistNftContainer from \"../../../components/Preview/Status/UnlistNftContainer\";\nimport NftContractNotSupported from \"../../../components/Preview/Status/NftContractNotSupported\";\nimport NotListedNftContainer from \"../../../components/Preview/Status/NotListedNftContainer\";\n\ninterface PropTypes extends SignedInProps {\n}\n\ntype ParamTypes = {\n    contractId: string,\n    tokenId: string,\n}\n\nconst PreviewNftPage: React.FC<PropTypes> = ({accountId}) => {\n    const {contractId, tokenId} = useParams<ParamTypes>()\n    const {nft, fetching, payouts} = useAppSelector(state => state.preview.nft)\n    const dispatch = useAppDispatch()\n\n    if (!contractId || !tokenId) {\n        return <NotFoundPage/>\n    }\n\n    useEffect(() => {\n        dispatch(fetchNft(contractId, tokenId))\n        return () => {\n            dispatch(previewNftSlice.actions.reset())\n        }\n    }, [accountId])\n\n    if (fetching) {\n        return <MjolLoader/>\n    }\n    if (!nft) {\n        return <NotFoundPage/>\n    }\n\n    const getStatus = () => {\n        if (!accountId) {\n            return <ConnectWalletButton/>\n        }\n\n        const nftStatus = useNftMarketStatus(accountId, nft)\n        switch (nftStatus) {\n            case ItemMarketStatus.CAN_BUY:\n                return <BuyNftContainer price={nft.price}\n                                        onClick={\n                                            () => dispatch(buyNft(contractId, tokenId, nft.price || ''))\n                                        }\n                />\n            case ItemMarketStatus.CAN_SELL:\n                return <SellNftContainer imgSrc={nft.mediaURL}\n                                         payouts={payouts}\n                                         onClick={\n                                             (price: string) => dispatch(sellNft(contractId, tokenId, price, nft))\n                                         }\n                />\n            case ItemMarketStatus.LISTED:\n                return <UnlistNftContainer price={nft.price}\n                                           onClick={\n                                               () => dispatch(unlistNft(contractId, tokenId))\n                                           }/>\n            case ItemMarketStatus.NOT_SUPPORTED:\n                return <NftContractNotSupported/>\n            case ItemMarketStatus.FREE:\n                return <NotListedNftContainer/>\n        }\n    }\n\n\n    return (\n        <div className=\"grid md:grid-cols-2 gap-8 min-h-screen bg-mjol-white p-5 xs:p-10 md:items-start\">\n            <PreviewNftImage link={nft.mediaURL}/>\n            <NftPreviewInfo nft={nft}\n                            payouts={payouts}\n                            statusElement={getStatus()}\n            />\n        </div>\n    )\n};\n\nexport default withAuthData(PreviewNftPage);\n","import {AppDispatch} from \"../../store\";\nimport {previewNftSlice} from \"./slice\";\nimport {getNftPayouts, getNFTsByContractAndTokenId} from \"../../../business-logic/near/api/nfts/get-user-nfts\";\n\nexport const fetchNft = (contractId: string, tokenId: string) =>\n    async (dispatch: AppDispatch) => {\n\n        dispatch(previewNftSlice.actions.toggleFetching(true))\n\n        Promise.all([\n                getNFTsByContractAndTokenId(contractId, tokenId)\n                    .then(nft => dispatch(previewNftSlice.actions.success(nft)))\n                    .catch(() => dispatch(previewNftSlice.actions.failure())),\n\n                getNftPayouts(contractId, tokenId)\n                    .then(p => dispatch(previewNftSlice.actions.setPayouts(p)))\n            ]\n        ).finally(() => dispatch(previewNftSlice.actions.toggleFetching(false)))\n    }","import React, {useEffect} from 'react';\nimport {Navigate, useNavigate} from 'react-router-dom'\nimport {signOut} from \"../../business-logic/near/enviroment/near\";\nimport MjolLoader from \"../../components/Common/loaders/MjolLoader\";\n\nconst Logout = () => {\n    const navigate = useNavigate()\n    useEffect(() => {\n        signOut()\n        navigate(\"/\")\n    }, [])\n\n    return <MjolLoader/>\n};\n\nexport default Logout;","import React from 'react';\nimport {FaSearch} from 'react-icons/fa'\n\nconst SearchInput = ({placeholder, isTyping, onCancel, onSearch}) => {\n    return (\n        <div className=\"flex text-xs xs:text-md\">\n            <input className=\"rounded-l-3xl w-full sm:w-88\n                              focus:outline-0 outline-none py-2 px-5 ring-1 ring-inset ring-blue-100\"\n                   placeholder={placeholder}\n                   type=\"search\"\n            />\n            <div className=\"rounded-r-3xl px-5 bg-gradient-to-b from-blue-400 to-blue-900 grid place-items-center cursor-pointer\">\n                <FaSearch color=\"white\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default SearchInput;","import React from 'react';\nimport BlueShadowContainer from \"../../../components/Common/shadow/BlueShadowContainer\";\nimport DarkBlueTitle from \"../../../components/Common/text/DarkBlueTitle\";\nimport SearchInput from \"../../../components/Filter/search/SearchInput\";\n\nconst NftFilters = () => {\n    return (\n        <BlueShadowContainer>\n            <div className=\"pb-10 px-4 space-y-8\">\n                <DarkBlueTitle title=\"Explore NFTs\"/>\n                <div className=\"flex justify-center\">\n                    <SearchInput placeholder=\"Search by NFT name\"/>\n                </div>\n            </div>\n        </BlueShadowContainer>\n    );\n};\n\nexport default NftFilters;","import React from 'react';\n\ninterface PropTypes {\n    size?: number,\n    className?: string\n}\n\nconst CardLoader = React.memo<PropTypes>(({size = 300, ...props}) => {\n    const gradient = (direction: string) =>\n        `linear-gradient(to ${direction}, rgb(229, 232, 235), rgba(255, 255, 255, 0))`\n\n    return (\n        <div {...props}>\n            <div className=\"flex flex-col ring-1 rounded-xl ring-gray-200 overflow-hidden pulse-animation w-full\n                        transform hover:shadow-mjol-gray-xs hover:ring-inset\"\n            >\n                {/* Image block */}\n                <div style={{\n                    width: size,\n                    height: size,\n                    background: gradient('right')\n                }}>\n                </div>\n\n                <div className=\"py-2 px-2 xxs:px-5 space-y-0.5 mt-0.5\">\n                    {/* Title block */}\n                    <div className=\"inline-flex justify-between w-full rounded-lg overflow-hidden\"\n                         style={{\n                             height: '18px'\n                         }}\n                    >\n                        <div style={{\n                            background: gradient('right'),\n                            width: \"35%\",\n                        }}/>\n                        <div style={{\n                            background: gradient('left'),\n                            width: \"20%\"\n                        }}/>\n                    </div>\n\n                    {/* Subtitle block */}\n                    <div className=\"inline-flex justify-between w-full rounded-lg overflow-hidden\"\n                         style={{\n                             height: \"15px\"\n                         }}\n                    >\n                        <div style={{\n                            background: gradient('right'),\n                            width: \"50%\",\n                        }}/>\n                        <div style={{\n                            background: gradient('left'),\n                            width: \"25%\"\n                        }}/>\n                    </div>\n                </div>\n\n                {/* Price block */}\n                <div className=\"w-full mt-4 px-2 xxs:px-5 pt-3 pb-1\"\n                     style={{\n                         background: \"linear-gradient(rgba(229, 232, 235, 0.392) 0%, rgb(255, 255, 255) 20%)\"\n                     }}>\n                    <div className=\"inline-flex w-full justify-between rounded-lg overflow-hidden\"\n                         style={{\n                             height: '17px'\n                         }}\n                    >\n                        <div style={{\n                            background: gradient('right'),\n                            width: \"50%\",\n                        }}/>\n                        <div style={{\n                            background: gradient('left'),\n                            width: \"25%\"\n                        }}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n});\n\nexport default CardLoader;","import React from 'react';\n\nconst CardsGridContainer: React.FC = ({children}) => {\n    return (\n        <div className=\"grid gap-6 lg:gap-7 2xl:gap-10 justify-center\n                                 grid-cols-1\n                                 xxs:grid-cols-1nft-300\n                                 sm:grid-cols-2nft-300\n                                 lg:grid-cols-3nft-300\n                                 xl:grid-cols-4nft-300\"\n        >\n            {children}\n        </div>\n    );\n};\n\nexport default CardsGridContainer;","import CardLoader from \"../Card/CardLoader\";\nimport React from \"react\";\nimport CardsGridContainer from \"./CardsGridContainer\";\n\n/**\n * Returns NFT card skeleton loader component\n */\nconst CardListLoader = React.memo(() => {\n    return (\n        <CardsGridContainer>\n            <CardLoader/>\n            <CardLoader className=\"hidden sm:block\"/>\n            <CardLoader className=\"hidden lg:block\"/>\n            <CardLoader className=\"hidden xl:block\"/>\n        </CardsGridContainer>\n    )\n});\n\nexport default CardListLoader","import {motion} from 'framer-motion';\nimport React, {useState} from 'react';\nimport {LazyLoadImage, ScrollPosition} from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/opacity.css';\nimport MjolLoader from \"../../Common/loaders/MjolLoader\";\n\ninterface PropTypes {\n    path: string,\n    scrollPosition?: ScrollPosition\n}\n\nconst ImageBlock: React.FC<PropTypes> = ({path, scrollPosition}) => {\n\n    const [loading, setLoading] = useState(true)\n\n    return (\n        <div className=\"aspect-w-1 aspect-h-1 justify-center\">\n            <LazyLoadImage src={path}\n                           alt=\"media not supported\"\n                           effect=\"opacity\"\n                           threshold={100}\n                           scrollPosition={scrollPosition}\n                           afterLoad={() => setLoading(false)}\n                           style={{\n                               width: \"100%\",\n                               height: \"100%\",\n                               objectFit: \"contain\",\n                           }}\n            />\n            {loading &&\n                <div className=\"flex items-center justify-center\">\n                    <MjolLoader/>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default ImageBlock;","import React from 'react';\nimport {GoUnverified, GoVerified} from \"react-icons/go\";\nimport DarkBlueMjolText from \"../../Common/text/DarkBlueMjolText\";\n\n\ninterface PropsTypes {\n    market?: string,\n    link?: string\n}\n\nconst MintedBlock = React.memo<PropsTypes>(({market, link}) => {\n    return (\n        <>\n            <div className=\"flex gap-1 items-center\">\n                {market !== 'unsupported contract'\n                    ? <GoVerified size={14} color=\"#18b3cc\"/>\n                    : <GoUnverified size={14} color=\"\"/>\n                }\n                <a className=\"text-mjol-purple-dark opacity-80 font-bold text-tiny-4 hover:opacity-90\"\n                   href={link}\n                   target=\"_blank\"\n                >\n                    {market === 'unsupported contract' ? 'Not verified' : `Minted on ${market}`}\n                </a>\n            </div>\n            <hr className=\"border-mjol-purple-dark\"/>\n        </>\n    );\n});\n\nexport default MintedBlock;","import React from 'react';\n\ninterface PropTypes {\n    title: string,\n}\n\nconst TitleBlock = React.memo<PropTypes>(({title}) => {\n    return (\n        <div className=\"font-bold text-mjol-purple-dark truncate text-md\">\n            {title}\n        </div>\n    );\n});\n\nexport default TitleBlock;","import React from 'react';\ninterface PropTypes {\n    name: string,\n}\n\nconst CollectionBlock = React.memo<PropTypes>(({name}) => {\n    return (\n        <div className=\"text-xs-2 font-semibold truncate text-mjol-purple-dark opacity-75 hover:opacity-90\">\n            {name}\n        </div>\n    );\n});\n\nexport default CollectionBlock;","import React from 'react';\nimport NearBlackLogo from \"../../Icons/near/NearBlackLogo\";\nimport DarkBlueMjolText from \"../../Common/text/DarkBlueMjolText\";\n\ninterface PropTypes {\n    price: string | null\n}\n\nconst PriceBlock = React.memo<PropTypes>(({price}) => {\n    const isListed = price !== null\n    return (\n        <div className=\"mt-2 mb-1 grid place-items-end\">\n            <div className=\"flex items-center gap-2\">\n                <p className=\"text-mjol-cyan-base font-black text-lg\">\n                    {isListed ? price : \"Not listed\"}\n                </p>\n                {isListed && <NearBlackLogo/>}\n            </div>\n        </div>\n    );\n});\n\nexport default PriceBlock;","import React from 'react';\nimport ImageBlock from \"./Blocks/ImageBlock\";\nimport MintedBlock from \"./Blocks/MintedBlock\";\nimport TitleBlock from \"./Blocks/TitleBlock\";\nimport CollectionBlock from \"./Blocks/CollectionBlock\";\nimport PriceBlock from \"./Blocks/PriceBlock\";\nimport {Nft} from \"../../business-logic/models/nft\";\nimport {Link} from \"react-router-dom\";\nimport {ScrollPosition} from \"react-lazy-load-image-component\";\n\ninterface PropTypes {\n    nft: Nft,\n    scrollPosition?: ScrollPosition\n}\n\nconst Card: React.FC<PropTypes> = ({nft, scrollPosition}) => {\n    const previewLink = `/nft/${nft.contractId}/${nft.tokenId}`\n    return (\n        <div className=\"flex flex-col justify-between overflow-hidden w-full rounded-xl\n                        ring-1 ring-blue-300 select-none\n                        transform hover:shadow-mjol-medium-blue-all-xs\"\n        >\n            <Link to={previewLink}>\n                <ImageBlock path={nft.mediaURL} scrollPosition={scrollPosition}/>\n            </Link>\n            <div className=\"px-2 xxs:px-5 mt-1\">\n                <div className=\"flex flex-col mb-4\">\n                    <Link to={previewLink}>\n                        <TitleBlock title={nft.title}/>\n                    </Link>\n                    <Link to=\"MOCK\">\n                        <CollectionBlock name=\"Mock collection\"/>\n                    </Link>\n                </div>\n                <MintedBlock market={nft.mintSite?.name} link={nft.mintSite?.nftLink}/>\n                <PriceBlock price={nft.price}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import Card from \"../Card/Card\";\nimport React from \"react\";\nimport {Nft} from \"../../business-logic/models/nft\";\nimport CardsGridContainer from \"./CardsGridContainer\";\nimport {ScrollPosition} from \"react-lazy-load-image-component\";\nimport {buildUID} from \"../../business-logic/near/api/utils\";\n\ninterface PropTypes {\n    nfts: Nft[],\n    scrollPosition?: ScrollPosition\n}\n\n/**\n * Returns NFT items grid component\n *\n * @param nfts array of {@link Nft} items\n * @param scrollPosition\n */\nconst CardGrid: React.FC<PropTypes> = ({nfts, scrollPosition}) => {\n    return (\n        <CardsGridContainer>\n            {nfts.map(nft => {\n                    const uid = buildUID(nft.contractId, nft.tokenId)\n                    return <Card key={uid} nft={nft} scrollPosition={scrollPosition}/>\n                }\n            )}\n        </CardsGridContainer>\n    )\n};\n\nexport default CardGrid;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {Nft} from \"../../../business-logic/models/nft\";\nimport {MarketPage} from \"../../../business-logic/near/api/market/get-nfts-market\";\n\nexport interface ExploreNftsState {\n    nfts: Nft[],\n    fetching: boolean,\n    from: number,\n    limit: number,\n    hasMore: boolean,\n    total: number\n}\n\nconst initialState: ExploreNftsState = {\n    nfts: [],\n    fetching: false,\n    from: 0,\n    limit: 12,\n    hasMore: true,\n    total: 0\n}\n\nexport const exploreNftsSlice = createSlice({\n    name: \"explore-nfts\",\n    initialState,\n    reducers: {\n        setPageData: (state, action: PayloadAction<MarketPage>) => {\n            state.nfts = state.nfts.concat(action.payload.tokens)\n            state.total = action.payload.total\n            state.hasMore = action.payload.hasMore\n            state.from += state.limit\n        },\n        toggleFetching: (state, action: PayloadAction<boolean>) => {\n            state.fetching = action.payload\n        },\n        reset: () => initialState\n    }\n})\n\nexport const exploreNftsReducer = exploreNftsSlice.reducer;","import {getConvertedNFT} from \"../standardization\";\nimport {viewFunction} from \"../rpc\";\nimport {marketAPI} from \"./api\";\nimport {buildUID, formatOptionalPrice} from \"../utils\";\nimport {batchRequest} from \"../batch-request\";\nimport {Nft} from \"../../../models/nft\";\nimport {MarketToken} from \"../types/response/market\";\n\nexport interface MarketPage {\n    tokens: Nft[],\n    hasMore: boolean,\n    total: number\n}\n\n\nexport async function getMarketNfts(from = 0, limit = 50): Promise<MarketPage> {\n    const marketNfts = await marketAPI.fetchTokens(from, limit)\n    return batchRequest<MarketToken, Nft>(marketNfts.tokens, async token => {\n        const {price, token_id, nft_contract_id: contractId} = token\n        return viewFunction({\n                contractId,\n                methodName: 'nft_token',\n                args: {token_id}\n            }\n        ).then(response => {\n                const uid = buildUID(contractId, token_id)\n                const tokenPrice = {[uid]: formatOptionalPrice(price)}\n                return getConvertedNFT(contractId, response, tokenPrice)\n            }\n        )\n    }).then(result => ({\n        tokens: result.values,\n        hasMore: marketNfts.has_next_batch,\n        total: marketNfts.total_count\n    }))\n}\n\n","import {AppDispatch} from \"../../store\";\nimport {exploreNftsSlice} from \"./slice\";\nimport {getMarketNfts} from \"../../../business-logic/near/api/market/get-nfts-market\";\n\nexport const fetchMarketNfts = (from: number, limit: number) =>\n    async (dispatch: AppDispatch) => {\n        dispatch(exploreNftsSlice.actions.toggleFetching(true))\n        getMarketNfts(from, limit)\n            .then(data => dispatch(exploreNftsSlice.actions.setPageData(data)))\n            .finally(() => dispatch(exploreNftsSlice.actions.toggleFetching(false)))\n    }","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {Nft} from \"../../../business-logic/models/nft\";\nimport {ContractId} from \"../../../business-logic/models/types\";\n\nexport enum ProfileNftsTab {\n    All = \"All NFTs\",\n    Listed = \"Listed NFTs\",\n    History = \"My History\"\n}\n\nexport interface ProfileState {\n    tabs: ProfileNftsTab[],\n    activeTab: ProfileNftsTab,\n    contracts: ContractId[],\n    fetching: boolean,\n    nfts: Nft[],\n    history: []\n}\n\nconst initialState: ProfileState = {\n    tabs: [ProfileNftsTab.All, ProfileNftsTab.Listed, ProfileNftsTab.History],\n    activeTab: ProfileNftsTab.All,\n    fetching: false,\n    contracts: [],\n    nfts: [],\n    history: []\n}\n\nexport const profileNftsSlice = createSlice({\n    name: \"profile-nfts\",\n    initialState,\n    reducers: {\n        changeTab: (state, action: PayloadAction<ProfileNftsTab>) => {\n            state.activeTab = action.payload\n        },\n        setPageData: (state, action: PayloadAction<Nft[]>) => {\n            state.nfts = action.payload\n        },\n        addNft: (state, action: PayloadAction<any>) => {\n            state.nfts.push(action.payload)\n        },\n        toggleFetching: (state, action: PayloadAction<boolean>) => {\n            state.fetching = action.payload\n        },\n        resetNfts: (state) => {\n            state.nfts = []\n            state.fetching = true\n        }\n    }\n})\n\nexport const profileNftsReducer = profileNftsSlice.reducer","import React, {useEffect} from 'react';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport CardListLoader from \"./CardListLoader\";\nimport CardGrid from \"./CardGrid\";\nimport {useAppDispatch, useAppSelector} from \"../../hooks/redux\";\nimport {fetchMarketNfts} from \"../../state/explore/nfts/thunk\";\nimport {exploreNftsSlice} from \"../../state/explore/nfts/slice\";\nimport DarkBlueMjolText from \"../Common/text/DarkBlueMjolText\";\nimport {ScrollPosition, trackWindowScroll} from \"react-lazy-load-image-component\";\n\n\ninterface PropTypes {\n    scrollPosition: ScrollPosition\n}\n\nconst CardList: React.FC<PropTypes> = ({scrollPosition}) => {\n\n    const {nfts, hasMore, fetching, from, limit} = useAppSelector(state => state.explore.nfts)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchMarketNfts(from, limit))\n        return () => {\n            dispatch(exploreNftsSlice.actions.reset())\n        }\n    }, [])\n\n    const fetchNextTokens = () => {\n        if (hasMore && !fetching) {\n            return dispatch(fetchMarketNfts(from, limit))\n        }\n    }\n\n    return (\n        <InfiniteScroll\n            next={fetchNextTokens}\n            scrollThreshold=\"100px\"\n            hasMore={hasMore}\n            className={\"py-5 \" + (nfts.length !== 0 ? \"space-y-6 lg:space-y-7 2xl:space-y-10\" : \"\")}\n            loader={<CardListLoader/>}\n            dataLength={nfts.length}\n            endMessage={<DarkBlueMjolText text=\"No more items on market\"/>}\n        >\n            <CardGrid nfts={nfts} scrollPosition={scrollPosition}/>\n        </InfiniteScroll>\n    );\n};\n\nexport default trackWindowScroll(CardList);","import React from 'react';\nimport {useAppSelector} from \"../../../hooks/redux\";\n\n\nimport NftFilters from \"./NftFilters\";\nimport CardList from \"../../../components/CardList/CardList\";\n\nconst ExploreNftsPage = () => {\n\n    const totalItems = useAppSelector(state => state.explore.nfts.total)\n\n    return (\n        <>\n            <NftFilters/>\n            <div className=\"my-5 font-mono text-center text-gray-600\">\n                Total items: {totalItems}\n            </div>\n            <CardList/>\n        </>\n    )\n\n};\n\nexport default ExploreNftsPage;","import React from 'react';\n\nconst ProfileCollectionsPage = () => {\n    return (\n        <div>\n\n        </div>\n    );\n};\n\nexport default ProfileCollectionsPage;","import React, {useEffect} from 'react';\nimport DarkBlueMjolText from \"../../../components/Common/text/DarkBlueMjolText\";\n\n\ninterface PropTypes {\n    accountId: string\n}\n\nconst ProfileHistoryFetch: React.FC<PropTypes> = ({accountId}) => {\n\n    useEffect(() => {\n\n    }, [accountId])\n\n    return (\n        <DarkBlueMjolText text=\"History\"/>\n    );\n};\n\nexport default ProfileHistoryFetch;","import React from 'react';\nimport {motion} from \"framer-motion\";\nimport {Link} from \"react-router-dom\";\nimport {grayGradient} from \"../../utils/css-utils\";\n\ninterface PropTypes {\n    width?: number,\n    height?: number\n}\n\n/**\n * Returns empty card list animated component\n */\nconst EmptyCardList: React.FC<PropTypes> = React.memo(({width = 150, height = 190}) => {\n    return (\n        <div className=\"w-full flex flex-col justify-center items-center gap-10\">\n            <div className=\"inline-flex place-items-end gap-4\">\n                <motion.div className=\"rounded-lg shadow-mjol-gray-xs\"\n                            style={{\n                                width,\n                                height,\n                                background: grayGradient(\"left\")\n                            }}\n                            initial={{\n                                rotate: -3,\n                            }}\n                            animate={{\n                                rotate: -10,\n                            }}\n                            transition={{\n                                repeatType: \"reverse\",\n                                duration: 1,\n                                repeat: Infinity,\n                            }}\n                />\n                <motion.div\n                    className=\"rounded-lg shadow-mjol-gray-xs\"\n                    style={{\n                        width: width * 0.7,\n                        height: height * 0.7,\n                        background: grayGradient(\"right\")\n                    }}\n                    initial={{\n                        rotate: 6,\n                    }}\n                    animate={{\n                        rotate: 20,\n                    }}\n                    transition={{\n                        repeatType: \"reverse\",\n                        duration: 1,\n                        repeat: Infinity\n                    }}\n                >\n                </motion.div>\n            </div>\n            <div className=\"inline-flex gap-1 items-baseline text-sm\">\n                <div className=\"text-gray-600\">\n                    No items found. You can buy NFTs on\n                </div>\n                <Link to=\"/nfts\" className=\"text-blue-600 font-black\">\n                    market\n                </Link>\n            </div>\n        </div>\n    );\n});\n\nexport default EmptyCardList;","import React, {useEffect} from 'react';\nimport {useAppDispatch, useAppSelector} from \"../../../hooks/redux\";\nimport {ProfileNftsTab, profileNftsSlice} from \"../../../state/profile/nfts/slice\";\nimport {fetchMyNfts} from \"../../../state/profile/nfts/thunk\";\nimport CardGrid from \"../../../components/CardList/CardGrid\";\nimport CardListLoader from \"../../../components/CardList/CardListLoader\";\nimport EmptyCardList from \"../../../components/CardList/EmptyCardList\";\n\ninterface PropTypes {\n    accountId: string\n}\n\nconst ProfileNftsFetch: React.FC<PropTypes> = ({accountId}) => {\n    const {nfts, fetching, activeTab} = useAppSelector(state => state.profile.nfts)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchMyNfts(accountId))\n        return () => {\n            dispatch(profileNftsSlice.actions.resetNfts())\n        }\n    }, [accountId])\n\n    return (\n        <>\n            {fetching\n                ? <CardListLoader/>\n                : nfts.length === 0\n                    ? <EmptyCardList/>\n                    : <CardGrid nfts={\n                        activeTab === ProfileNftsTab.Listed\n                            ? nfts.filter(nft => nft.price !== null)\n                            : nfts\n                    }/>\n            }\n        </>\n    );\n};\n\nexport default ProfileNftsFetch;","import {getUserNfts} from \"../../../business-logic/near/api/nfts/get-user-nfts\";\n\nimport {AppDispatch} from \"../../store\";\nimport {profileNftsSlice} from \"./slice\";\n\nexport const fetchMyNfts = (accountId: string) =>\n    async (dispatch: AppDispatch) => {\n        dispatch(profileNftsSlice.actions.toggleFetching(true))\n        getUserNfts(accountId)\n            .then(nfts => dispatch(profileNftsSlice.actions.setPageData(nfts)))\n            .finally(() => dispatch(profileNftsSlice.actions.toggleFetching(false)))\n    }","import React from 'react';\nimport classNames from \"../../../utils/css-utils\";\nimport DarkBlueMjolText from \"../text/DarkBlueMjolText\";\n\nconst MjolBlueGradientButton = ({title, onClick, isActive = true}) => {\n\n    return (\n        <button onClick={onClick}\n                className={\n                    classNames(isActive\n                            ? \"from-blue-500 to-blue-800\"\n                            : \"hover:shadow-mjol-blue-button hover:ring-1 hover:ring-inset hover:ring-blue-400\"\n                        ,\n                        \"bg-gradient-to-l from-transparent to-transparent rounded-lg group px-6 py-1 transform duration-200\"\n                    )\n                }\n        >\n            {isActive\n                ? <div className=\"text-white font-extrabold\">{title}</div>\n                : <DarkBlueMjolText text={title}/>\n            }\n        </button>\n    );\n};\n\nexport default MjolBlueGradientButton;","import React, {useMemo} from 'react';\nimport MjolBlueGradientButton from \"../../../../components/Common/buttons/MjolBlueGradientButton\";\nimport DarkBlueTitle from \"../../../../components/Common/text/DarkBlueTitle\";\nimport BlueShadowContainer from \"../../../../components/Common/shadow/BlueShadowContainer\";\nimport {ProfileNftsTab} from \"../../../../state/profile/nfts/slice\";\n\ninterface PropTypes {\n    tabs: ProfileNftsTab[],\n    activeTab: ProfileNftsTab,\n    changeTab: (tab: ProfileNftsTab) => void\n}\n\nconst ProfileNavigationBar: React.FC<PropTypes> = ({changeTab, activeTab, tabs}) => {\n    return (\n        <BlueShadowContainer>\n            <div className=\"pb-10 space-y-10\">\n                <DarkBlueTitle title=\"My NFTs\"/>\n                <div className=\"text-center\">\n                    <div className=\"inline-flex flex-col gap-2 sm:flex-row sm:gap-5 md:text-lg\">\n                        {tabs.map(item => (\n                            <MjolBlueGradientButton\n                                key={item}\n                                title={item}\n                                isActive={item === activeTab}\n                                onClick={() => changeTab(item)}\n                            />)\n                        )}\n                    </div>\n                </div>\n            </div>\n        </BlueShadowContainer>\n    );\n};\n\nexport default ProfileNavigationBar;","import React, {useMemo} from 'react';\nimport {useAppDispatch, useAppSelector} from \"../../../hooks/redux\";\nimport withAuthData, {SignedInProps} from \"../../../hoc/withAuthData\";\nimport {ProfileNftsTab, profileNftsSlice} from \"../../../state/profile/nfts/slice\";\nimport ProfileHistoryFetch from \"./ProfileHistoryFetch\";\nimport ProfileNftsFetch from \"./ProfileNftsFetch\";\nimport ProfileNavigationBar from \"./navbar/ProfileNavigationBar\";\n\ninterface PropTypes extends SignedInProps {\n}\n\n\nconst ProfileFetch: React.FC<PropTypes> = ({accountId}) => {\n    const {activeTab, tabs} = useAppSelector(state => state.profile.nfts)\n    const dispatch = useAppDispatch()\n\n    const changeTab = (tab: ProfileNftsTab) => {\n        dispatch(profileNftsSlice.actions.changeTab(tab))\n    }\n\n    const child = useMemo(() => {\n        switch (activeTab) {\n            case ProfileNftsTab.All:\n            case ProfileNftsTab.Listed:\n                return <ProfileNftsFetch accountId={accountId}/>\n            case ProfileNftsTab.History:\n                return <ProfileHistoryFetch accountId={accountId}/>\n        }\n    }, [activeTab])\n\n    return (\n        <div className=\"space-y-8 pb-4 min-h-screen\">\n            <ProfileNavigationBar changeTab={changeTab}\n                                  activeTab={activeTab}\n                                  tabs={tabs}/>\n\n            {child}\n        </div>\n    )\n};\n\nexport default withAuthData(ProfileFetch);","import React from 'react';\nimport {Route, Routes} from \"react-router\";\nimport LandingPage from \"./pages/landing/LandingPage\";\nimport NotFoundPage from \"./pages/not-found/NotFoundPage\";\nimport CreateCollectionPage from \"./pages/create/collection/CreateCollectionPage\";\nimport CreateNftPage from \"./pages/create/nft/CreateNftPage\";\nimport ExploreCollectionsPage from \"./pages/explore/collection/ExploreCollectionsPage\";\nimport PreviewNftPage from \"./pages/preview/nft/PreviewNftPage\";\nimport Logout from \"./hoc/auth/Logout\";\nimport ExploreNftsPage from \"./pages/explore/nft/ExploreNftsPage\";\nimport ProfileCollectionsPage from \"./pages/profile/collections/ProfileCollectionsPage\";\nimport ProfileNftsPage from \"./pages/profile/nfts/ProfileNftsPage\";\n\nconst AppRouter = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<LandingPage/>}/>\n            <Route path=\"logout\" element={<Logout/>}/>\n            <Route path=\"nfts\" element={<ExploreNftsPage/>}/>\n            <Route path=\"nft/:contractId/:tokenId\" element={<PreviewNftPage/>}/>\n            <Route path=\"collections\" element={<ExploreCollectionsPage/>}/>\n\n            <Route path=\"create-nft\" element={<CreateNftPage/>}/>\n            <Route path=\"create-collection\" element={<CreateCollectionPage/>}/>\n\n            {/*<Route path=\"profile/\">*/}\n            <Route path=\"profile/nfts\" element={<ProfileNftsPage/>}/>\n            <Route path=\"profile/collections\" element={<ProfileCollectionsPage/>}/>\n            {/*</Route>*/}\n\n            <Route path=\"*\" element={<NotFoundPage/>}/>\n        </Routes>\n    );\n};\n\nexport default AppRouter;\n\n\n\n","import React, {useEffect} from 'react'\nimport {collectionAPI} from \"./business-logic/near/api/collection\";\nimport NearConnectButton from \"./components/Common/buttons/NearConnectButton\";\nimport WalletConnectionPage from \"./pages/auth/WalletConnectionPage\";\nimport NavbarContainer from \"./pages/navbar/NavbarContainer\";\nimport AppRouter from \"./AppRouter\";\n\nexport default function App() {\n\n    useEffect(() => {\n        collectionAPI.fetchNfts('collection-2', 0, 1).then(r => console.log(r))\n    })\n\n    return (\n        <div>\n            {/*<WalletConnectionPage/>*/}\n            <NavbarContainer/>\n            <AppRouter/>\n        </div>\n    )\n}","import {combineReducers} from \"redux\";\nimport {previewNftReducer} from \"./nft/slice\";\n\nexport const previewReducer = combineReducers({\n    nft: previewNftReducer\n})","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    tabs: {\n        explore: [\n            {name: 'NFTs', path: '/nfts'},\n            {name: 'Collections', path: '/collections'},\n        ],\n        create: [\n            {name: 'NFT', path: '/create-nft'},\n            {name: 'Collection', path: '/create-collection'}\n        ],\n        profile: [\n            {name: 'My NFTs', path: '/profile/nfts'},\n            {name: 'My Collections', path: '/profile/collections'},\n            {name: 'Sign out', path: '/logout'}\n        ],\n        single: [\n            {name: 'Launchpad', path: '/launchpad'},\n            {name: 'Docs', path: '/docs'}\n        ]\n    }\n}\n\nexport const navbarSlice = createSlice({\n    name: \"navbar\",\n    initialState,\n    reducers: {}\n})\n\nexport const navbarReducer = navbarSlice.reducer","import {combineReducers} from \"redux\";\nimport {exploreNftsReducer} from \"./nfts/slice\";\n\nexport const exploreReducer = combineReducers({\n    nfts: exploreNftsReducer\n})","import {combineReducers} from \"redux\";\nimport {profileNftsReducer} from \"./nfts/slice\";\n\nexport const profileReducer = combineReducers({\n    nfts: profileNftsReducer\n})\n","import {configureStore} from \"@reduxjs/toolkit\";\nimport {combineReducers} from \"redux\";\nimport {previewReducer} from \"./preview/reducer\";\nimport {navbarReducer} from \"./navbar/slice\";\nimport {exploreReducer} from \"./explore/reducer\";\nimport {profileReducer} from \"./profile/reducer\";\n\n\nexport const rootReducer = combineReducers({\n    navbar: navbarReducer,\n    profile: profileReducer,\n    preview: previewReducer,\n    explore: exploreReducer\n})\n\nexport const setupStore = () => {\n    return configureStore({\n        reducer: rootReducer\n    })\n}\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport type AppStore = ReturnType<typeof setupStore>\nexport type AppDispatch = AppStore['dispatch']","import './index.css';\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport App from \"./App\";\nimport {setupStore} from \"./state/store\";\n\nconst store = setupStore()\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)","import {decode} from '@webassemblyjs/wasm-parser';\n\n/**\n * Converts a base64-encoded string to a byte array. Works in browser and Node\n * environments.\n *\n * @param strb64 base64 string\n * @returns Decoded byte array\n */\nfunction base64StringToUint8Array(strb64: string): Uint8Array {\n    if (typeof Buffer !== 'undefined') {\n        // Node\n        return Buffer.from(strb64, 'base64');\n    } else {\n        // Browser\n        return new Uint8Array(\n            atob(strb64.toString().trim())\n                .split('')\n                .map(c => c.charCodeAt(0)),\n        );\n    }\n}\n\n/**\n * Parse base64-encoded WASM into AST\n *\n * @param wasmb64 base64-encoded WASM binary\n * @returns WASM abstract syntax tree\n */\nexport function parseWasm(wasmb64: string): any {\n    return decode(base64StringToUint8Array(wasmb64));\n}\n"],"sourceRoot":""}